{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\"; // import Result from \"./Result\";\n\nimport AggregateInput from \"./AggregateInput\"; //============================================================================================================================================================================================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst commodityList = [\"RICE\", \"WHEAT\", \"SUGAR\", \"CORN\", \"WTIOIL\", \"BRENTOIL\", \"SOYBEAN\", \"COFFEE\", \"XAU\", \"XAG\", \"XPD\", \"XPT\", \"XRH\", \"RUBBER\", \"ETHANOL\", \"CPO\", \"NG\"];\n\nconst Commodity = () => {\n  _s();\n\n  // console.log(props.aggregatedSearch);\n  // const [commodity, setCommodity] = useState(\"\");\n  // const [query, setQuery] = useState([]);\n  const [type, setType] = useState([]); // CommodityAPI\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${props.searchWord}&symbols=USD`;\n  console.log(commodityAPI); //CryptoAPI\n  // const cryptoAPI = ``;\n  //Need to consolidate API to decide which to call (if this then that)\n  //Maybe using state, so if state change then select that one?\n  //map the forex array to sort names\n  // thinking maybe i can consolidate the api keywords under consolidatedAPI so that i can do an if, else\n  // const consolidatedAPI = ``;\n  // console.log(commodityAPI);\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json(); // console.log(rawData);\n\n    const rawDataArray = [rawData]; // console.log(rawDataArray);\n\n    const filteredData = rawDataArray.map(duck => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit\n      };\n    });\n    setType(filteredData);\n  }; // console.log(type);\n  // const handleSelectionChange = (event) => {\n  //   setCommodity(event.target.value);\n  //   // console.log(event);\n  // };\n\n\n  const mappedData = type.map((element, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"USD: \", element.price.USD, \" \", element.unit, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: makeApiCall,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), mappedData]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Commodity, \"WXPla22d30zypIVQqRgwjrC0hIM=\");\n\n_c = Commodity;\nexport default Commodity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Commodity\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js"],"names":["React","useState","useEffect","DropdownList","AggregateInput","commodityList","Commodity","type","setType","commodityAPI","props","searchWord","console","log","makeApiCall","res","fetch","rawData","json","rawDataArray","filteredData","map","duck","price","data","rates","unit","mappedData","element","index","USD"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B,C,CACA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;;;;AAEA,MAAMC,aAAa,GAAG,CACpB,MADoB,EAEpB,OAFoB,EAGpB,OAHoB,EAIpB,MAJoB,EAKpB,QALoB,EAMpB,UANoB,EAOpB,SAPoB,EAQpB,QARoB,EASpB,KAToB,EAUpB,KAVoB,EAWpB,KAXoB,EAYpB,KAZoB,EAapB,KAboB,EAcpB,QAdoB,EAepB,SAfoB,EAgBpB,KAhBoB,EAiBpB,IAjBoB,CAAtB;;AAoBA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB;AAEA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC,CALsB,CAOtB;;AAEA,QAAMQ,YAAY,GAAI,2HAA0HC,KAAK,CAACC,UAAW,cAAjK;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ,EAXsB,CAYtB;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;;AAEA,QAAMK,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACP,YAAD,CAAvB;AACA,UAAMQ,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB,CAF8B,CAI9B;;AAEA,UAAMC,YAAY,GAAG,CAACF,OAAD,CAArB,CAN8B,CAQ9B;;AAEA,UAAMG,YAAY,GAAGD,YAAY,CAACE,GAAb,CAAkBC,IAAD,IAAU;AAC9C,aAAO;AACLC,QAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,KADZ;AAELC,QAAAA,IAAI,EAAEJ,IAAI,CAACE,IAAL,CAAUE;AAFX,OAAP;AAID,KALoB,CAArB;AAMAlB,IAAAA,OAAO,CAACY,YAAD,CAAP;AACD,GAjBD,CA3BsB,CA6CtB;AAEA;AACA;AACA;AACA;;;AAEA,QAAMO,UAAU,GAAGpB,IAAI,CAACc,GAAL,CAAS,CAACO,OAAD,EAAUC,KAAV,KAAoB;AAC9C,wBACE;AAAA,6BACE;AAAA,4BACQD,OAAO,CAACL,KAAR,CAAcO,GADtB,OAC4BF,OAAO,CAACF,IADpC,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUG,KAAV;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAQD,GATkB,CAAnB;AAWA,sBACE;AAAA,4BAOE;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,OAAO,EAAEf,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EAUGa,UAVH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA9ED;;GAAMrB,S;;KAAAA,S;AAgFN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\n// import Result from \"./Result\";\nimport AggregateInput from \"./AggregateInput\";\n\n//============================================================================================================================================================================================\n\nconst commodityList = [\n  \"RICE\",\n  \"WHEAT\",\n  \"SUGAR\",\n  \"CORN\",\n  \"WTIOIL\",\n  \"BRENTOIL\",\n  \"SOYBEAN\",\n  \"COFFEE\",\n  \"XAU\",\n  \"XAG\",\n  \"XPD\",\n  \"XPT\",\n  \"XRH\",\n  \"RUBBER\",\n  \"ETHANOL\",\n  \"CPO\",\n  \"NG\",\n];\n\nconst Commodity = () => {\n  // console.log(props.aggregatedSearch);\n\n  // const [commodity, setCommodity] = useState(\"\");\n  // const [query, setQuery] = useState([]);\n  const [type, setType] = useState([]);\n\n  // CommodityAPI\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${props.searchWord}&symbols=USD`;\n\n  console.log(commodityAPI);\n  //CryptoAPI\n\n  // const cryptoAPI = ``;\n\n  //Need to consolidate API to decide which to call (if this then that)\n  //Maybe using state, so if state change then select that one?\n\n  //map the forex array to sort names\n\n  // thinking maybe i can consolidate the api keywords under consolidatedAPI so that i can do an if, else\n\n  // const consolidatedAPI = ``;\n\n  // console.log(commodityAPI);\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json();\n\n    // console.log(rawData);\n\n    const rawDataArray = [rawData];\n\n    // console.log(rawDataArray);\n\n    const filteredData = rawDataArray.map((duck) => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit,\n      };\n    });\n    setType(filteredData);\n  };\n  // console.log(type);\n\n  // const handleSelectionChange = (event) => {\n  //   setCommodity(event.target.value);\n  //   // console.log(event);\n  // };\n\n  const mappedData = type.map((element, index) => {\n    return (\n      <>\n        <div key={index}>\n          USD: {element.price.USD} {element.unit}\n          <br />\n        </div>\n      </>\n    );\n  });\n\n  return (\n    <div>\n      {/* <h2>Select a commodity</h2>\n      <DropdownList\n        data={commodityList}\n        // forex={forexList}\n        onChange={(nextValue) => setQuery(nextValue)}\n      /> */}\n      <br />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <p>{query}</p> */}\n      {mappedData}\n      {/* is propsing down to child (Result component) */}\n    </div>\n  );\n};\n\nexport default Commodity;\n"]},"metadata":{},"sourceType":"module"}