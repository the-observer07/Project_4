{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Ticker, { FinancialTicker } from \"nice-react-ticker\"; // import Ticker from \"react-ticker\";\n\nimport Bottleneck from \"bottleneck\";\nimport { type } from \"@testing-library/user-event/dist/type\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoTicker = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/exchanges/binance/tickers`;\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n    // must be divisible by 250\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  }); //   const result = await limiter.schedule(() => makeApiCall());\n\n  useEffect(() => {\n    throttledApiCall();\n    filterData();\n  }, []);\n\n  const fetchAPI = async () => {\n    const res = await fetch(cryptoApiTicker);\n    console.log(res);\n    const rawData = await res.json();\n    console.log(rawData);\n    setData(rawData.tickers);\n  };\n\n  console.log(data);\n\n  const filterData = () => {\n    const filteredData = data.map((element, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"symbol: \", element.base, \", price: \", element.last, \", priceBTC:\", \" \", element.converted_last.btc, \",\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this);\n    }); // setType(filteredData);\n    // console.log(filteredData);\n  };\n\n  console.log(type);\n  const throttledApiCall = limiter.wrap(fetchAPI); // const res = await fetch(cryptoApiTicker);\n  // const rawData = await res.json();\n  // console.log(rawData);\n  // setData = rawData;\n  //   const fet\n  //   console.log(data);\n  //   const allThePromises = data.map((item) => {\n  //     return throttledApiCall();\n  //   });\n  //   const rawData = await limiter.schedule();\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Ticker, {\n      offset: \"run-in\",\n      speed: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoTicker, \"c7je2sjGq7mIo9E3VxO4sX+hTmI=\");\n\n_c = CryptoTicker;\nexport default CryptoTicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoTicker\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js"],"names":["React","useState","useEffect","Ticker","FinancialTicker","Bottleneck","type","CryptoTicker","data","setData","setType","cryptoApiTicker","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","throttledApiCall","filterData","fetchAPI","res","fetch","console","log","rawData","json","tickers","filteredData","map","element","index","base","last","converted_last","btc","wrap"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,eAAjB,QAAwC,mBAAxC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,IAAT,QAAqB,uCAArB;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOI,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMU,eAAe,GAAI,4DAAzB;AAEA,QAAMC,OAAO,GAAG,IAAIP,UAAJ,CAAe;AAC7BQ,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,IAHF;AAGQ;AAErC;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB,CANyB,CAgBzB;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,gBAAgB;AAChBC,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACX,eAAD,CAAvB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAMI,OAAO,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAtB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAhB,IAAAA,OAAO,CAACgB,OAAO,CAACE,OAAT,CAAP;AACD,GAND;;AAOAJ,EAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;;AAEA,QAAMW,UAAU,GAAG,MAAM;AACvB,UAAMS,YAAY,GAAGpB,IAAI,CAACqB,GAAL,CAAS,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAChD,0BACE;AAAA,+BACWD,OAAO,CAACE,IADnB,eACkCF,OAAO,CAACG,IAD1C,iBAC2D,GAD3D,EAEGH,OAAO,CAACI,cAAR,CAAuBC,GAF1B;AAAA,SAAUJ,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPoB,CAArB,CADuB,CASvB;AACA;AACD,GAXD;;AAYAR,EAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,QAAMY,gBAAgB,GAAGN,OAAO,CAACwB,IAAR,CAAahB,QAAb,CAAzB,CA9CyB,CAgDzB;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAC,QAAf;AAAwB,MAAA,KAAK,EAAE;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlFD;;GAAMb,Y;;KAAAA,Y;AAoFN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Ticker, { FinancialTicker } from \"nice-react-ticker\";\n// import Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\nimport { type } from \"@testing-library/user-event/dist/type\";\n\nconst CryptoTicker = () => {\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/exchanges/binance/tickers`;\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000, // must be divisible by 250\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  //   const result = await limiter.schedule(() => makeApiCall());\n\n  useEffect(() => {\n    throttledApiCall();\n    filterData();\n  }, []);\n\n  const fetchAPI = async () => {\n    const res = await fetch(cryptoApiTicker);\n    console.log(res);\n    const rawData = await res.json();\n    console.log(rawData);\n    setData(rawData.tickers);\n  };\n  console.log(data);\n\n  const filterData = () => {\n    const filteredData = data.map((element, index) => {\n      return (\n        <div key={index}>\n          symbol: {element.base}, price: {element.last}, priceBTC:{\" \"}\n          {element.converted_last.btc},\n        </div>\n      );\n    });\n    // setType(filteredData);\n    // console.log(filteredData);\n  };\n  console.log(type);\n\n  const throttledApiCall = limiter.wrap(fetchAPI);\n\n  // const res = await fetch(cryptoApiTicker);\n  // const rawData = await res.json();\n  // console.log(rawData);\n  // setData = rawData;\n\n  //   const fet\n  //   console.log(data);\n\n  //   const allThePromises = data.map((item) => {\n  //     return throttledApiCall();\n  //   });\n  //   const rawData = await limiter.schedule();\n\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return (\n    <div>\n      <Ticker offset=\"run-in\" speed={10}></Ticker>\n    </div>\n  );\n};\n\nexport default CryptoTicker;\n"]},"metadata":{},"sourceType":"module"}