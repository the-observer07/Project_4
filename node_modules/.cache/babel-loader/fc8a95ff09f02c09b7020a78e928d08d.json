{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _regeneratorRuntime = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _classCallCheck = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar Bottleneck,\n    DEFAULT_PRIORITY,\n    Events,\n    Job,\n    LocalDatastore,\n    NUM_PRIORITIES,\n    Queues,\n    RedisDatastore,\n    States,\n    Sync,\n    parser,\n    splice = [].splice;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nQueues = require(\"./Queues\");\nJob = require(\"./Job\");\nLocalDatastore = require(\"./LocalDatastore\");\nRedisDatastore = require(\"./RedisDatastore\");\nEvents = require(\"./Events\");\nStates = require(\"./States\");\nSync = require(\"./Sync\");\n\nBottleneck = function () {\n  var Bottleneck = /*#__PURE__*/function () {\n    function Bottleneck() {\n      var _this4 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Bottleneck);\n\n      var storeInstanceOptions, storeOptions;\n      this._addToQueue = this._addToQueue.bind(this);\n\n      for (var _len = arguments.length, invalid = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        invalid[_key - 1] = arguments[_key];\n      }\n\n      this._validateOptions(options, invalid);\n\n      parser.load(options, this.instanceDefaults, this);\n      this._queues = new Queues(NUM_PRIORITIES);\n      this._scheduled = {};\n      this._states = new States([\"RECEIVED\", \"QUEUED\", \"RUNNING\", \"EXECUTING\"].concat(this.trackDoneStatus ? [\"DONE\"] : []));\n      this._limiter = null;\n      this.Events = new Events(this);\n      this._submitLock = new Sync(\"submit\", this.Promise);\n      this._registerLock = new Sync(\"register\", this.Promise);\n      storeOptions = parser.load(options, this.storeDefaults, {});\n\n      this._store = function () {\n        if (this.datastore === \"redis\" || this.datastore === \"ioredis\" || this.connection != null) {\n          storeInstanceOptions = parser.load(options, this.redisStoreDefaults, {});\n          return new RedisDatastore(this, storeOptions, storeInstanceOptions);\n        } else if (this.datastore === \"local\") {\n          storeInstanceOptions = parser.load(options, this.localStoreDefaults, {});\n          return new LocalDatastore(this, storeOptions, storeInstanceOptions);\n        } else {\n          throw new Bottleneck.prototype.BottleneckError(\"Invalid datastore type: \".concat(this.datastore));\n        }\n      }.call(this);\n\n      this._queues.on(\"leftzero\", function () {\n        var ref;\n        return (ref = _this4._store.heartbeat) != null ? typeof ref.ref === \"function\" ? ref.ref() : void 0 : void 0;\n      });\n\n      this._queues.on(\"zero\", function () {\n        var ref;\n        return (ref = _this4._store.heartbeat) != null ? typeof ref.unref === \"function\" ? ref.unref() : void 0 : void 0;\n      });\n    }\n\n    _createClass(Bottleneck, [{\n      key: \"_validateOptions\",\n      value: function _validateOptions(options, invalid) {\n        if (!(options != null && typeof options === \"object\" && invalid.length === 0)) {\n          throw new Bottleneck.prototype.BottleneckError(\"Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.\");\n        }\n      }\n    }, {\n      key: \"ready\",\n      value: function ready() {\n        return this._store.ready;\n      }\n    }, {\n      key: \"clients\",\n      value: function clients() {\n        return this._store.clients;\n      }\n    }, {\n      key: \"channel\",\n      value: function channel() {\n        return \"b_\".concat(this.id);\n      }\n    }, {\n      key: \"channel_client\",\n      value: function channel_client() {\n        return \"b_\".concat(this.id, \"_\").concat(this._store.clientId);\n      }\n    }, {\n      key: \"publish\",\n      value: function publish(message) {\n        return this._store.__publish__(message);\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        return this._store.__disconnect__(flush);\n      }\n    }, {\n      key: \"chain\",\n      value: function chain(_limiter) {\n        this._limiter = _limiter;\n        return this;\n      }\n    }, {\n      key: \"queued\",\n      value: function queued(priority) {\n        return this._queues.queued(priority);\n      }\n    }, {\n      key: \"clusterQueued\",\n      value: function clusterQueued() {\n        return this._store.__queued__();\n      }\n    }, {\n      key: \"empty\",\n      value: function empty() {\n        return this.queued() === 0 && this._submitLock.isEmpty();\n      }\n    }, {\n      key: \"running\",\n      value: function running() {\n        return this._store.__running__();\n      }\n    }, {\n      key: \"done\",\n      value: function done() {\n        return this._store.__done__();\n      }\n    }, {\n      key: \"jobStatus\",\n      value: function jobStatus(id) {\n        return this._states.jobStatus(id);\n      }\n    }, {\n      key: \"jobs\",\n      value: function jobs(status) {\n        return this._states.statusJobs(status);\n      }\n    }, {\n      key: \"counts\",\n      value: function counts() {\n        return this._states.statusCounts();\n      }\n    }, {\n      key: \"_randomIndex\",\n      value: function _randomIndex() {\n        return Math.random().toString(36).slice(2);\n      }\n    }, {\n      key: \"check\",\n      value: function check() {\n        var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return this._store.__check__(weight);\n      }\n    }, {\n      key: \"_clearGlobalState\",\n      value: function _clearGlobalState(index) {\n        if (this._scheduled[index] != null) {\n          clearTimeout(this._scheduled[index].expiration);\n          delete this._scheduled[index];\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"_free\",\n      value: function _free(index, job, options, eventInfo) {\n        var _this = this;\n\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var e, running, _ref;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return _this._store.__free__(index, options.weight);\n\n                case 3:\n                  _ref = _context.sent;\n                  running = _ref.running;\n\n                  _this.Events.trigger(\"debug\", \"Freed \".concat(options.id), eventInfo);\n\n                  if (!(running === 0 && _this.empty())) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this.Events.trigger(\"idle\"));\n\n                case 8:\n                  _context.next = 14;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](0);\n                  e = _context.t0;\n                  return _context.abrupt(\"return\", _this.Events.trigger(\"error\", e));\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 10]]);\n        }))();\n      }\n    }, {\n      key: \"_run\",\n      value: function _run(index, job, wait) {\n        var _this5 = this;\n\n        var clearGlobalState, free, run;\n        job.doRun();\n        clearGlobalState = this._clearGlobalState.bind(this, index);\n        run = this._run.bind(this, index, job);\n        free = this._free.bind(this, index, job);\n        return this._scheduled[index] = {\n          timeout: setTimeout(function () {\n            return job.doExecute(_this5._limiter, clearGlobalState, run, free);\n          }, wait),\n          expiration: job.options.expiration != null ? setTimeout(function () {\n            return job.doExpire(clearGlobalState, run, free);\n          }, wait + job.options.expiration) : void 0,\n          job: job\n        };\n      }\n    }, {\n      key: \"_drainOne\",\n      value: function _drainOne(capacity) {\n        var _this6 = this;\n\n        return this._registerLock.schedule(function () {\n          var args, index, next, options, queue;\n\n          if (_this6.queued() === 0) {\n            return _this6.Promise.resolve(null);\n          }\n\n          queue = _this6._queues.getFirst();\n\n          var _next2 = next = queue.first();\n\n          options = _next2.options;\n          args = _next2.args;\n\n          if (capacity != null && options.weight > capacity) {\n            return _this6.Promise.resolve(null);\n          }\n\n          _this6.Events.trigger(\"debug\", \"Draining \".concat(options.id), {\n            args: args,\n            options: options\n          });\n\n          index = _this6._randomIndex();\n          return _this6._store.__register__(index, options.weight, options.expiration).then(function (_ref7) {\n            var success = _ref7.success,\n                wait = _ref7.wait,\n                reservoir = _ref7.reservoir;\n            var empty;\n\n            _this6.Events.trigger(\"debug\", \"Drained \".concat(options.id), {\n              success: success,\n              args: args,\n              options: options\n            });\n\n            if (success) {\n              queue.shift();\n              empty = _this6.empty();\n\n              if (empty) {\n                _this6.Events.trigger(\"empty\");\n              }\n\n              if (reservoir === 0) {\n                _this6.Events.trigger(\"depleted\", empty);\n              }\n\n              _this6._run(index, next, wait);\n\n              return _this6.Promise.resolve(options.weight);\n            } else {\n              return _this6.Promise.resolve(null);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"_drainAll\",\n      value: function _drainAll(capacity) {\n        var _this7 = this;\n\n        var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        return this._drainOne(capacity).then(function (drained) {\n          var newCapacity;\n\n          if (drained != null) {\n            newCapacity = capacity != null ? capacity - drained : capacity;\n            return _this7._drainAll(newCapacity, total + drained);\n          } else {\n            return _this7.Promise.resolve(total);\n          }\n        }).catch(function (e) {\n          return _this7.Events.trigger(\"error\", e);\n        });\n      }\n    }, {\n      key: \"_dropAllQueued\",\n      value: function _dropAllQueued(message) {\n        return this._queues.shiftAll(function (job) {\n          return job.doDrop({\n            message: message\n          });\n        });\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var _this8 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var done, waitForExecuting;\n        options = parser.load(options, this.stopDefaults);\n\n        waitForExecuting = function waitForExecuting(at) {\n          var finished;\n\n          finished = function finished() {\n            var counts;\n            counts = _this8._states.counts;\n            return counts[0] + counts[1] + counts[2] + counts[3] === at;\n          };\n\n          return new _this8.Promise(function (resolve, reject) {\n            if (finished()) {\n              return resolve();\n            } else {\n              return _this8.on(\"done\", function () {\n                if (finished()) {\n                  _this8.removeAllListeners(\"done\");\n\n                  return resolve();\n                }\n              });\n            }\n          });\n        };\n\n        done = options.dropWaitingJobs ? (this._run = function (index, next) {\n          return next.doDrop({\n            message: options.dropErrorMessage\n          });\n        }, this._drainOne = function () {\n          return _this8.Promise.resolve(null);\n        }, this._registerLock.schedule(function () {\n          return _this8._submitLock.schedule(function () {\n            var k, ref, v;\n            ref = _this8._scheduled;\n\n            for (k in ref) {\n              v = ref[k];\n\n              if (_this8.jobStatus(v.job.options.id) === \"RUNNING\") {\n                clearTimeout(v.timeout);\n                clearTimeout(v.expiration);\n                v.job.doDrop({\n                  message: options.dropErrorMessage\n                });\n              }\n            }\n\n            _this8._dropAllQueued(options.dropErrorMessage);\n\n            return waitForExecuting(0);\n          });\n        })) : this.schedule({\n          priority: NUM_PRIORITIES - 1,\n          weight: 0\n        }, function () {\n          return waitForExecuting(1);\n        });\n\n        this._receive = function (job) {\n          return job._reject(new Bottleneck.prototype.BottleneckError(options.enqueueErrorMessage));\n        };\n\n        this.stop = function () {\n          return _this8.Promise.reject(new Bottleneck.prototype.BottleneckError(\"stop() has already been called\"));\n        };\n\n        return done;\n      }\n    }, {\n      key: \"_addToQueue\",\n      value: function _addToQueue(job) {\n        var _this2 = this;\n\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var args, blocked, error, options, reachedHWM, shifted, strategy, _ref2;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  args = job.args;\n                  options = job.options;\n                  _context2.prev = 2;\n                  _context2.next = 5;\n                  return _this2._store.__submit__(_this2.queued(), options.weight);\n\n                case 5:\n                  _ref2 = _context2.sent;\n                  reachedHWM = _ref2.reachedHWM;\n                  blocked = _ref2.blocked;\n                  strategy = _ref2.strategy;\n                  _context2.next = 17;\n                  break;\n\n                case 11:\n                  _context2.prev = 11;\n                  _context2.t0 = _context2[\"catch\"](2);\n                  error = _context2.t0;\n\n                  _this2.Events.trigger(\"debug\", \"Could not queue \".concat(options.id), {\n                    args: args,\n                    options: options,\n                    error: error\n                  });\n\n                  job.doDrop({\n                    error: error\n                  });\n                  return _context2.abrupt(\"return\", false);\n\n                case 17:\n                  if (!blocked) {\n                    _context2.next = 22;\n                    break;\n                  }\n\n                  job.doDrop();\n                  return _context2.abrupt(\"return\", true);\n\n                case 22:\n                  if (!reachedHWM) {\n                    _context2.next = 28;\n                    break;\n                  }\n\n                  shifted = strategy === Bottleneck.prototype.strategy.LEAK ? _this2._queues.shiftLastFrom(options.priority) : strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? _this2._queues.shiftLastFrom(options.priority + 1) : strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;\n\n                  if (shifted != null) {\n                    shifted.doDrop();\n                  }\n\n                  if (!(shifted == null || strategy === Bottleneck.prototype.strategy.OVERFLOW)) {\n                    _context2.next = 28;\n                    break;\n                  }\n\n                  if (shifted == null) {\n                    job.doDrop();\n                  }\n\n                  return _context2.abrupt(\"return\", reachedHWM);\n\n                case 28:\n                  job.doQueue(reachedHWM, blocked);\n\n                  _this2._queues.push(job);\n\n                  _context2.next = 32;\n                  return _this2._drainAll();\n\n                case 32:\n                  return _context2.abrupt(\"return\", reachedHWM);\n\n                case 33:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[2, 11]]);\n        }))();\n      }\n    }, {\n      key: \"_receive\",\n      value: function _receive(job) {\n        if (this._states.jobStatus(job.options.id) != null) {\n          job._reject(new Bottleneck.prototype.BottleneckError(\"A job with the same id already exists (id=\".concat(job.options.id, \")\")));\n\n          return false;\n        } else {\n          job.doReceive();\n          return this._submitLock.schedule(this._addToQueue, job);\n        }\n      }\n    }, {\n      key: \"submit\",\n      value: function submit() {\n        var _this9 = this;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var cb, fn, job, options, ref, ref1, task;\n\n        if (typeof args[0] === \"function\") {\n          var _ref3, _ref4, _splice$call, _splice$call2;\n\n          ref = args, (_ref3 = ref, _ref4 = _toArray(_ref3), fn = _ref4[0], args = _ref4.slice(1), _ref3), (_splice$call = splice.call(args, -1), _splice$call2 = _slicedToArray(_splice$call, 1), cb = _splice$call2[0], _splice$call);\n          options = parser.load({}, this.jobDefaults);\n        } else {\n          var _ref5, _ref6, _splice$call3, _splice$call4;\n\n          ref1 = args, (_ref5 = ref1, _ref6 = _toArray(_ref5), options = _ref6[0], fn = _ref6[1], args = _ref6.slice(2), _ref5), (_splice$call3 = splice.call(args, -1), _splice$call4 = _slicedToArray(_splice$call3, 1), cb = _splice$call4[0], _splice$call3);\n          options = parser.load(options, this.jobDefaults);\n        }\n\n        task = function task() {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return new _this9.Promise(function (resolve, reject) {\n            return fn.apply(void 0, args.concat([function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n\n              return (args[0] != null ? reject : resolve)(args);\n            }]));\n          });\n        };\n\n        job = new Job(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);\n        job.promise.then(function (args) {\n          return typeof cb === \"function\" ? cb.apply(void 0, _toConsumableArray(args)) : void 0;\n        }).catch(function (args) {\n          if (Array.isArray(args)) {\n            return typeof cb === \"function\" ? cb.apply(void 0, _toConsumableArray(args)) : void 0;\n          } else {\n            return typeof cb === \"function\" ? cb(args) : void 0;\n          }\n        });\n        return this._receive(job);\n      }\n    }, {\n      key: \"schedule\",\n      value: function schedule() {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        var job, options, task;\n\n        if (typeof args[0] === \"function\") {\n          var _args = args;\n\n          var _args2 = _toArray(_args);\n\n          task = _args2[0];\n          args = _args2.slice(1);\n          options = {};\n        } else {\n          var _args3 = args;\n\n          var _args4 = _toArray(_args3);\n\n          options = _args4[0];\n          task = _args4[1];\n          args = _args4.slice(2);\n        }\n\n        job = new Job(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);\n\n        this._receive(job);\n\n        return job.promise;\n      }\n    }, {\n      key: \"wrap\",\n      value: function wrap(fn) {\n        var schedule, wrapped;\n        schedule = this.schedule.bind(this);\n\n        wrapped = function wrapped() {\n          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n            args[_key6] = arguments[_key6];\n          }\n\n          return schedule.apply(void 0, [fn.bind(this)].concat(args));\n        };\n\n        wrapped.withOptions = function (options) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            args[_key7 - 1] = arguments[_key7];\n          }\n\n          return schedule.apply(void 0, [options, fn].concat(args));\n        };\n\n        return wrapped;\n      }\n    }, {\n      key: \"updateSettings\",\n      value: function updateSettings() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var _this3 = this;\n\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this3._store.__updateSettings__(parser.overwrite(options, _this3.storeDefaults));\n\n                case 2:\n                  parser.overwrite(options, _this3.instanceDefaults, _this3);\n                  return _context3.abrupt(\"return\", _this3);\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))();\n      }\n    }, {\n      key: \"currentReservoir\",\n      value: function currentReservoir() {\n        return this._store.__currentReservoir__();\n      }\n    }, {\n      key: \"incrementReservoir\",\n      value: function incrementReservoir() {\n        var incr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        return this._store.__incrementReservoir__(incr);\n      }\n    }]);\n\n    return Bottleneck;\n  }();\n\n  ;\n  Bottleneck.default = Bottleneck;\n  Bottleneck.Events = Events;\n  Bottleneck.version = Bottleneck.prototype.version = require(\"./version.json\").version;\n  Bottleneck.strategy = Bottleneck.prototype.strategy = {\n    LEAK: 1,\n    OVERFLOW: 2,\n    OVERFLOW_PRIORITY: 4,\n    BLOCK: 3\n  };\n  Bottleneck.BottleneckError = Bottleneck.prototype.BottleneckError = require(\"./BottleneckError\");\n  Bottleneck.Group = Bottleneck.prototype.Group = require(\"./Group\");\n  Bottleneck.RedisConnection = Bottleneck.prototype.RedisConnection = require(\"./RedisConnection\");\n  Bottleneck.IORedisConnection = Bottleneck.prototype.IORedisConnection = require(\"./IORedisConnection\");\n  Bottleneck.Batcher = Bottleneck.prototype.Batcher = require(\"./Batcher\");\n  Bottleneck.prototype.jobDefaults = {\n    priority: DEFAULT_PRIORITY,\n    weight: 1,\n    expiration: null,\n    id: \"<no-id>\"\n  };\n  Bottleneck.prototype.storeDefaults = {\n    maxConcurrent: null,\n    minTime: 0,\n    highWater: null,\n    strategy: Bottleneck.prototype.strategy.LEAK,\n    penalty: null,\n    reservoir: null,\n    reservoirRefreshInterval: null,\n    reservoirRefreshAmount: null,\n    reservoirIncreaseInterval: null,\n    reservoirIncreaseAmount: null,\n    reservoirIncreaseMaximum: null\n  };\n  Bottleneck.prototype.localStoreDefaults = {\n    Promise: Promise,\n    timeout: null,\n    heartbeatInterval: 250\n  };\n  Bottleneck.prototype.redisStoreDefaults = {\n    Promise: Promise,\n    timeout: null,\n    heartbeatInterval: 5000,\n    clientTimeout: 10000,\n    Redis: null,\n    clientOptions: {},\n    clusterNodes: null,\n    clearDatastore: false,\n    connection: null\n  };\n  Bottleneck.prototype.instanceDefaults = {\n    datastore: \"local\",\n    connection: null,\n    id: \"<no-id>\",\n    rejectOnDrop: true,\n    trackDoneStatus: false,\n    Promise: Promise\n  };\n  Bottleneck.prototype.stopDefaults = {\n    enqueueErrorMessage: \"This limiter has been stopped and cannot accept new jobs.\",\n    dropWaitingJobs: true,\n    dropErrorMessage: \"This limiter has been stopped.\"\n  };\n  return Bottleneck;\n}.call(void 0);\n\nmodule.exports = Bottleneck;","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/bottleneck/lib/Bottleneck.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","_toArray","_iterableToArray","TypeError","iter","Object","prototype","toString","call","Array","from","isArray","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","Bottleneck","DEFAULT_PRIORITY","Events","Job","LocalDatastore","NUM_PRIORITIES","Queues","RedisDatastore","States","Sync","parser","splice","require","options","storeInstanceOptions","storeOptions","_addToQueue","bind","invalid","_validateOptions","load","instanceDefaults","_queues","_scheduled","_states","concat","trackDoneStatus","_limiter","_submitLock","_registerLock","storeDefaults","_store","datastore","connection","redisStoreDefaults","localStoreDefaults","BottleneckError","on","ref","heartbeat","unref","ready","clients","id","clientId","message","__publish__","flush","__disconnect__","priority","queued","__queued__","isEmpty","__running__","__done__","jobStatus","status","statusJobs","statusCounts","Math","random","slice","weight","__check__","index","clearTimeout","expiration","job","eventInfo","_this","__free__","_ref","running","trigger","empty","e","wait","clearGlobalState","free","run","doRun","_clearGlobalState","_run","_free","timeout","setTimeout","doExecute","doExpire","capacity","schedule","queue","getFirst","_next2","first","_randomIndex","__register__","success","reservoir","shift","total","_drainOne","drained","newCapacity","_drainAll","catch","shiftAll","doDrop","waitForExecuting","stopDefaults","at","finished","counts","removeAllListeners","dropWaitingJobs","dropErrorMessage","k","v","_dropAllQueued","_receive","_reject","enqueueErrorMessage","stop","_this2","__submit__","_ref2","reachedHWM","blocked","strategy","shifted","LEAK","shiftLastFrom","OVERFLOW_PRIORITY","OVERFLOW","doQueue","doReceive","cb","ref1","task","_ref3","_ref4","_splice$call","_splice$call2","jobDefaults","_ref5","_ref6","_splice$call3","_splice$call4","rejectOnDrop","promise","_args","_args2","_args3","_args4","wrapped","withOptions","_this3","__updateSettings__","overwrite","__currentReservoir__","incr","__incrementReservoir__","default","version","BLOCK","Group","RedisConnection","IORedisConnection","Batcher","maxConcurrent","minTime","highWater","penalty","reservoirRefreshInterval","reservoirRefreshAmount","reservoirIncreaseInterval","reservoirIncreaseAmount","reservoirIncreaseMaximum","heartbeatInterval","clientTimeout","Redis","clientOptions","clusterNodes","clearDatastore","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar Bottleneck,\n    DEFAULT_PRIORITY,\n    Events,\n    Job,\n    LocalDatastore,\n    NUM_PRIORITIES,\n    Queues,\n    RedisDatastore,\n    States,\n    Sync,\n    parser,\n    splice = [].splice;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nQueues = require(\"./Queues\");\nJob = require(\"./Job\");\nLocalDatastore = require(\"./LocalDatastore\");\nRedisDatastore = require(\"./RedisDatastore\");\nEvents = require(\"./Events\");\nStates = require(\"./States\");\nSync = require(\"./Sync\");\n\nBottleneck = function () {\n  class Bottleneck {\n    constructor(options = {}, ...invalid) {\n      var storeInstanceOptions, storeOptions;\n      this._addToQueue = this._addToQueue.bind(this);\n\n      this._validateOptions(options, invalid);\n\n      parser.load(options, this.instanceDefaults, this);\n      this._queues = new Queues(NUM_PRIORITIES);\n      this._scheduled = {};\n      this._states = new States([\"RECEIVED\", \"QUEUED\", \"RUNNING\", \"EXECUTING\"].concat(this.trackDoneStatus ? [\"DONE\"] : []));\n      this._limiter = null;\n      this.Events = new Events(this);\n      this._submitLock = new Sync(\"submit\", this.Promise);\n      this._registerLock = new Sync(\"register\", this.Promise);\n      storeOptions = parser.load(options, this.storeDefaults, {});\n\n      this._store = function () {\n        if (this.datastore === \"redis\" || this.datastore === \"ioredis\" || this.connection != null) {\n          storeInstanceOptions = parser.load(options, this.redisStoreDefaults, {});\n          return new RedisDatastore(this, storeOptions, storeInstanceOptions);\n        } else if (this.datastore === \"local\") {\n          storeInstanceOptions = parser.load(options, this.localStoreDefaults, {});\n          return new LocalDatastore(this, storeOptions, storeInstanceOptions);\n        } else {\n          throw new Bottleneck.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`);\n        }\n      }.call(this);\n\n      this._queues.on(\"leftzero\", () => {\n        var ref;\n        return (ref = this._store.heartbeat) != null ? typeof ref.ref === \"function\" ? ref.ref() : void 0 : void 0;\n      });\n\n      this._queues.on(\"zero\", () => {\n        var ref;\n        return (ref = this._store.heartbeat) != null ? typeof ref.unref === \"function\" ? ref.unref() : void 0 : void 0;\n      });\n    }\n\n    _validateOptions(options, invalid) {\n      if (!(options != null && typeof options === \"object\" && invalid.length === 0)) {\n        throw new Bottleneck.prototype.BottleneckError(\"Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.\");\n      }\n    }\n\n    ready() {\n      return this._store.ready;\n    }\n\n    clients() {\n      return this._store.clients;\n    }\n\n    channel() {\n      return `b_${this.id}`;\n    }\n\n    channel_client() {\n      return `b_${this.id}_${this._store.clientId}`;\n    }\n\n    publish(message) {\n      return this._store.__publish__(message);\n    }\n\n    disconnect(flush = true) {\n      return this._store.__disconnect__(flush);\n    }\n\n    chain(_limiter) {\n      this._limiter = _limiter;\n      return this;\n    }\n\n    queued(priority) {\n      return this._queues.queued(priority);\n    }\n\n    clusterQueued() {\n      return this._store.__queued__();\n    }\n\n    empty() {\n      return this.queued() === 0 && this._submitLock.isEmpty();\n    }\n\n    running() {\n      return this._store.__running__();\n    }\n\n    done() {\n      return this._store.__done__();\n    }\n\n    jobStatus(id) {\n      return this._states.jobStatus(id);\n    }\n\n    jobs(status) {\n      return this._states.statusJobs(status);\n    }\n\n    counts() {\n      return this._states.statusCounts();\n    }\n\n    _randomIndex() {\n      return Math.random().toString(36).slice(2);\n    }\n\n    check(weight = 1) {\n      return this._store.__check__(weight);\n    }\n\n    _clearGlobalState(index) {\n      if (this._scheduled[index] != null) {\n        clearTimeout(this._scheduled[index].expiration);\n        delete this._scheduled[index];\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    _free(index, job, options, eventInfo) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var e, running;\n\n        try {\n          var _ref = yield _this._store.__free__(index, options.weight);\n\n          running = _ref.running;\n\n          _this.Events.trigger(\"debug\", `Freed ${options.id}`, eventInfo);\n\n          if (running === 0 && _this.empty()) {\n            return _this.Events.trigger(\"idle\");\n          }\n        } catch (error1) {\n          e = error1;\n          return _this.Events.trigger(\"error\", e);\n        }\n      })();\n    }\n\n    _run(index, job, wait) {\n      var clearGlobalState, free, run;\n      job.doRun();\n      clearGlobalState = this._clearGlobalState.bind(this, index);\n      run = this._run.bind(this, index, job);\n      free = this._free.bind(this, index, job);\n      return this._scheduled[index] = {\n        timeout: setTimeout(() => {\n          return job.doExecute(this._limiter, clearGlobalState, run, free);\n        }, wait),\n        expiration: job.options.expiration != null ? setTimeout(function () {\n          return job.doExpire(clearGlobalState, run, free);\n        }, wait + job.options.expiration) : void 0,\n        job: job\n      };\n    }\n\n    _drainOne(capacity) {\n      return this._registerLock.schedule(() => {\n        var args, index, next, options, queue;\n\n        if (this.queued() === 0) {\n          return this.Promise.resolve(null);\n        }\n\n        queue = this._queues.getFirst();\n\n        var _next2 = next = queue.first();\n\n        options = _next2.options;\n        args = _next2.args;\n\n        if (capacity != null && options.weight > capacity) {\n          return this.Promise.resolve(null);\n        }\n\n        this.Events.trigger(\"debug\", `Draining ${options.id}`, {\n          args,\n          options\n        });\n        index = this._randomIndex();\n        return this._store.__register__(index, options.weight, options.expiration).then(({\n          success,\n          wait,\n          reservoir\n        }) => {\n          var empty;\n          this.Events.trigger(\"debug\", `Drained ${options.id}`, {\n            success,\n            args,\n            options\n          });\n\n          if (success) {\n            queue.shift();\n            empty = this.empty();\n\n            if (empty) {\n              this.Events.trigger(\"empty\");\n            }\n\n            if (reservoir === 0) {\n              this.Events.trigger(\"depleted\", empty);\n            }\n\n            this._run(index, next, wait);\n\n            return this.Promise.resolve(options.weight);\n          } else {\n            return this.Promise.resolve(null);\n          }\n        });\n      });\n    }\n\n    _drainAll(capacity, total = 0) {\n      return this._drainOne(capacity).then(drained => {\n        var newCapacity;\n\n        if (drained != null) {\n          newCapacity = capacity != null ? capacity - drained : capacity;\n          return this._drainAll(newCapacity, total + drained);\n        } else {\n          return this.Promise.resolve(total);\n        }\n      }).catch(e => {\n        return this.Events.trigger(\"error\", e);\n      });\n    }\n\n    _dropAllQueued(message) {\n      return this._queues.shiftAll(function (job) {\n        return job.doDrop({\n          message\n        });\n      });\n    }\n\n    stop(options = {}) {\n      var done, waitForExecuting;\n      options = parser.load(options, this.stopDefaults);\n\n      waitForExecuting = at => {\n        var finished;\n\n        finished = () => {\n          var counts;\n          counts = this._states.counts;\n          return counts[0] + counts[1] + counts[2] + counts[3] === at;\n        };\n\n        return new this.Promise((resolve, reject) => {\n          if (finished()) {\n            return resolve();\n          } else {\n            return this.on(\"done\", () => {\n              if (finished()) {\n                this.removeAllListeners(\"done\");\n                return resolve();\n              }\n            });\n          }\n        });\n      };\n\n      done = options.dropWaitingJobs ? (this._run = function (index, next) {\n        return next.doDrop({\n          message: options.dropErrorMessage\n        });\n      }, this._drainOne = () => {\n        return this.Promise.resolve(null);\n      }, this._registerLock.schedule(() => {\n        return this._submitLock.schedule(() => {\n          var k, ref, v;\n          ref = this._scheduled;\n\n          for (k in ref) {\n            v = ref[k];\n\n            if (this.jobStatus(v.job.options.id) === \"RUNNING\") {\n              clearTimeout(v.timeout);\n              clearTimeout(v.expiration);\n              v.job.doDrop({\n                message: options.dropErrorMessage\n              });\n            }\n          }\n\n          this._dropAllQueued(options.dropErrorMessage);\n\n          return waitForExecuting(0);\n        });\n      })) : this.schedule({\n        priority: NUM_PRIORITIES - 1,\n        weight: 0\n      }, () => {\n        return waitForExecuting(1);\n      });\n\n      this._receive = function (job) {\n        return job._reject(new Bottleneck.prototype.BottleneckError(options.enqueueErrorMessage));\n      };\n\n      this.stop = () => {\n        return this.Promise.reject(new Bottleneck.prototype.BottleneckError(\"stop() has already been called\"));\n      };\n\n      return done;\n    }\n\n    _addToQueue(job) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        var args, blocked, error, options, reachedHWM, shifted, strategy;\n        args = job.args;\n        options = job.options;\n\n        try {\n          var _ref2 = yield _this2._store.__submit__(_this2.queued(), options.weight);\n\n          reachedHWM = _ref2.reachedHWM;\n          blocked = _ref2.blocked;\n          strategy = _ref2.strategy;\n        } catch (error1) {\n          error = error1;\n\n          _this2.Events.trigger(\"debug\", `Could not queue ${options.id}`, {\n            args,\n            options,\n            error\n          });\n\n          job.doDrop({\n            error\n          });\n          return false;\n        }\n\n        if (blocked) {\n          job.doDrop();\n          return true;\n        } else if (reachedHWM) {\n          shifted = strategy === Bottleneck.prototype.strategy.LEAK ? _this2._queues.shiftLastFrom(options.priority) : strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? _this2._queues.shiftLastFrom(options.priority + 1) : strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;\n\n          if (shifted != null) {\n            shifted.doDrop();\n          }\n\n          if (shifted == null || strategy === Bottleneck.prototype.strategy.OVERFLOW) {\n            if (shifted == null) {\n              job.doDrop();\n            }\n\n            return reachedHWM;\n          }\n        }\n\n        job.doQueue(reachedHWM, blocked);\n\n        _this2._queues.push(job);\n\n        yield _this2._drainAll();\n        return reachedHWM;\n      })();\n    }\n\n    _receive(job) {\n      if (this._states.jobStatus(job.options.id) != null) {\n        job._reject(new Bottleneck.prototype.BottleneckError(`A job with the same id already exists (id=${job.options.id})`));\n\n        return false;\n      } else {\n        job.doReceive();\n        return this._submitLock.schedule(this._addToQueue, job);\n      }\n    }\n\n    submit(...args) {\n      var cb, fn, job, options, ref, ref1, task;\n\n      if (typeof args[0] === \"function\") {\n        var _ref3, _ref4, _splice$call, _splice$call2;\n\n        ref = args, (_ref3 = ref, _ref4 = _toArray(_ref3), fn = _ref4[0], args = _ref4.slice(1), _ref3), (_splice$call = splice.call(args, -1), _splice$call2 = _slicedToArray(_splice$call, 1), cb = _splice$call2[0], _splice$call);\n        options = parser.load({}, this.jobDefaults);\n      } else {\n        var _ref5, _ref6, _splice$call3, _splice$call4;\n\n        ref1 = args, (_ref5 = ref1, _ref6 = _toArray(_ref5), options = _ref6[0], fn = _ref6[1], args = _ref6.slice(2), _ref5), (_splice$call3 = splice.call(args, -1), _splice$call4 = _slicedToArray(_splice$call3, 1), cb = _splice$call4[0], _splice$call3);\n        options = parser.load(options, this.jobDefaults);\n      }\n\n      task = (...args) => {\n        return new this.Promise(function (resolve, reject) {\n          return fn(...args, function (...args) {\n            return (args[0] != null ? reject : resolve)(args);\n          });\n        });\n      };\n\n      job = new Job(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);\n      job.promise.then(function (args) {\n        return typeof cb === \"function\" ? cb(...args) : void 0;\n      }).catch(function (args) {\n        if (Array.isArray(args)) {\n          return typeof cb === \"function\" ? cb(...args) : void 0;\n        } else {\n          return typeof cb === \"function\" ? cb(args) : void 0;\n        }\n      });\n      return this._receive(job);\n    }\n\n    schedule(...args) {\n      var job, options, task;\n\n      if (typeof args[0] === \"function\") {\n        var _args = args;\n\n        var _args2 = _toArray(_args);\n\n        task = _args2[0];\n        args = _args2.slice(1);\n        options = {};\n      } else {\n        var _args3 = args;\n\n        var _args4 = _toArray(_args3);\n\n        options = _args4[0];\n        task = _args4[1];\n        args = _args4.slice(2);\n      }\n\n      job = new Job(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);\n\n      this._receive(job);\n\n      return job.promise;\n    }\n\n    wrap(fn) {\n      var schedule, wrapped;\n      schedule = this.schedule.bind(this);\n\n      wrapped = function wrapped(...args) {\n        return schedule(fn.bind(this), ...args);\n      };\n\n      wrapped.withOptions = function (options, ...args) {\n        return schedule(options, fn, ...args);\n      };\n\n      return wrapped;\n    }\n\n    updateSettings(options = {}) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this3._store.__updateSettings__(parser.overwrite(options, _this3.storeDefaults));\n        parser.overwrite(options, _this3.instanceDefaults, _this3);\n        return _this3;\n      })();\n    }\n\n    currentReservoir() {\n      return this._store.__currentReservoir__();\n    }\n\n    incrementReservoir(incr = 0) {\n      return this._store.__incrementReservoir__(incr);\n    }\n\n  }\n\n  ;\n  Bottleneck.default = Bottleneck;\n  Bottleneck.Events = Events;\n  Bottleneck.version = Bottleneck.prototype.version = require(\"./version.json\").version;\n  Bottleneck.strategy = Bottleneck.prototype.strategy = {\n    LEAK: 1,\n    OVERFLOW: 2,\n    OVERFLOW_PRIORITY: 4,\n    BLOCK: 3\n  };\n  Bottleneck.BottleneckError = Bottleneck.prototype.BottleneckError = require(\"./BottleneckError\");\n  Bottleneck.Group = Bottleneck.prototype.Group = require(\"./Group\");\n  Bottleneck.RedisConnection = Bottleneck.prototype.RedisConnection = require(\"./RedisConnection\");\n  Bottleneck.IORedisConnection = Bottleneck.prototype.IORedisConnection = require(\"./IORedisConnection\");\n  Bottleneck.Batcher = Bottleneck.prototype.Batcher = require(\"./Batcher\");\n  Bottleneck.prototype.jobDefaults = {\n    priority: DEFAULT_PRIORITY,\n    weight: 1,\n    expiration: null,\n    id: \"<no-id>\"\n  };\n  Bottleneck.prototype.storeDefaults = {\n    maxConcurrent: null,\n    minTime: 0,\n    highWater: null,\n    strategy: Bottleneck.prototype.strategy.LEAK,\n    penalty: null,\n    reservoir: null,\n    reservoirRefreshInterval: null,\n    reservoirRefreshAmount: null,\n    reservoirIncreaseInterval: null,\n    reservoirIncreaseAmount: null,\n    reservoirIncreaseMaximum: null\n  };\n  Bottleneck.prototype.localStoreDefaults = {\n    Promise: Promise,\n    timeout: null,\n    heartbeatInterval: 250\n  };\n  Bottleneck.prototype.redisStoreDefaults = {\n    Promise: Promise,\n    timeout: null,\n    heartbeatInterval: 5000,\n    clientTimeout: 10000,\n    Redis: null,\n    clientOptions: {},\n    clusterNodes: null,\n    clearDatastore: false,\n    connection: null\n  };\n  Bottleneck.prototype.instanceDefaults = {\n    datastore: \"local\",\n    connection: null,\n    id: \"<no-id>\",\n    rejectOnDrop: true,\n    trackDoneStatus: false,\n    Promise: Promise\n  };\n  Bottleneck.prototype.stopDefaults = {\n    enqueueErrorMessage: \"This limiter has been stopped and cannot accept new jobs.\",\n    dropWaitingJobs: true,\n    dropErrorMessage: \"This limiter has been stopped.\"\n  };\n  return Bottleneck;\n}.call(void 0);\n\nmodule.exports = Bottleneck;"]},"metadata":{},"sourceType":"script"}