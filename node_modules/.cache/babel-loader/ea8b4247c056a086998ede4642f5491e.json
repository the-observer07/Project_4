{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CryptoTicker = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    data,\n    setData\n  } = useState(\"\");\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/search/trending'`;\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n    // must be divisible by 250\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n\n  const GetRatesFromAPI = () => {\n    _s();\n\n    const [rates, setRates] = useState(\"\");\n    useEffect(() => {\n      async function fetchData() {\n        const ratesFromAPI = await makeAPICall();\n        setRates(ratesFromAPI);\n      }\n\n      fetchData();\n    }, []);\n    return rates ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        whiteSpace: \"nowrap\"\n      },\n      children: [rates.join(\" +++ \"), \" +++ \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        visibility: \"hidden\"\n      },\n      children: \"Placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }; //   const result = await limiter.schedule(() => makeApiCall());\n  //   const makeApiCall = async () => {\n  //     const res = await fetch(cryptoApiTicker);\n  //     const rawData = await res.json();\n  //     // console.log(rawData);\n  //     setData = rawData;\n  //   };\n  //   console.log(data);\n\n\n  _s(GetRatesFromAPI, \"PxArx3BYTGErvd5zVkwcIxxOl0c=\");\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n  const allThePromises = rawData.map(item => {\n    return throttledApiCall();\n  }); //   const rawData = await limiter.schedule();\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Ticker, {\n      children: _ref => {\n        let {\n          index\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"This is the Headline of element #\", index, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"www.my-image-source.com/\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(CryptoTicker, \"0BcGgI3lzHvQLtfEzkhNz0DIEs4=\");\n\n_c = CryptoTicker;\nexport default CryptoTicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoTicker\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js"],"names":["React","useState","useEffect","Ticker","Bottleneck","CryptoTicker","data","setData","cryptoApiTicker","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","GetRatesFromAPI","rates","setRates","fetchData","ratesFromAPI","makeAPICall","whiteSpace","join","visibility","throttledApiCall","wrap","makeApiCall","allThePromises","rawData","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAAA;;AACzB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMO,eAAe,GAAI,mDAAzB;AAEA,QAAMC,OAAO,GAAG,IAAIL,UAAJ,CAAe;AAC7BM,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,IAHF;AAGQ;AAErC;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;;AASA,QAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACAC,IAAAA,SAAS,CAAC,MAAM;AACd,qBAAegB,SAAf,GAA2B;AACzB,cAAMC,YAAY,GAAG,MAAMC,WAAW,EAAtC;AACAH,QAAAA,QAAQ,CAACE,YAAD,CAAR;AACD;;AACDD,MAAAA,SAAS;AACV,KANQ,EAMN,EANM,CAAT;AAOA,WAAOF,KAAK,gBACV;AAAG,MAAA,KAAK,EAAE;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAAV;AAAA,iBAAqCL,KAAK,CAACM,IAAN,CAAW,OAAX,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAGV;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD,GAdD,CAdyB,CA8BzB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAvCyB,KAcnBR,eAdmB;;AAyCzB,QAAMS,gBAAgB,GAAGf,OAAO,CAACgB,IAAR,CAAaC,WAAb,CAAzB;AAEA,QAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAaC,IAAD,IAAU;AAC3C,WAAON,gBAAgB,EAAvB;AACD,GAFsB,CAAvB,CA3CyB,CA8CzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA,gBACG;AAAA,YAAC;AAAEO,UAAAA;AAAF,SAAD;AAAA,4BACC;AAAA,kCACE;AAAA,4DAAsCA,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,GAAG,EAAC,0BAAT;AAAoC,YAAA,GAAG,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,wBADD;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA5ED;;IAAM1B,Y;;KAAAA,Y;AA8EN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\n\nconst CryptoTicker = () => {\n  const { data, setData } = useState(\"\");\n\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/search/trending'`;\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000, // must be divisible by 250\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n  const GetRatesFromAPI = () => {\n    const [rates, setRates] = useState(\"\");\n    useEffect(() => {\n      async function fetchData() {\n        const ratesFromAPI = await makeAPICall();\n        setRates(ratesFromAPI);\n      }\n      fetchData();\n    }, []);\n    return rates ? (\n      <p style={{ whiteSpace: \"nowrap\" }}>{rates.join(\" +++ \")} +++ </p>\n    ) : (\n      <p style={{ visibility: \"hidden\" }}>Placeholder</p>\n    );\n  };\n\n  //   const result = await limiter.schedule(() => makeApiCall());\n\n  //   const makeApiCall = async () => {\n  //     const res = await fetch(cryptoApiTicker);\n  //     const rawData = await res.json();\n  //     // console.log(rawData);\n  //     setData = rawData;\n  //   };\n\n  //   console.log(data);\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  const allThePromises = rawData.map((item) => {\n    return throttledApiCall();\n  });\n  //   const rawData = await limiter.schedule();\n\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return (\n    <div>\n      <Ticker>\n        {({ index }) => (\n          <>\n            <h1>This is the Headline of element #{index}!</h1>\n            <img src=\"www.my-image-source.com/\" alt=\"\" />\n          </>\n        )}\n      </Ticker>\n    </div>\n  );\n};\n\nexport default CryptoTicker;\n"]},"metadata":{},"sourceType":"module"}