{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenList = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [type, setType] = useState([]);\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    setData(rawData.tickers);\n    const filteredData = rawData.tickers.map(duck => {\n      return {\n        id: duck.base,\n        price: duck.last\n      };\n    });\n    setType(filteredData);\n    const emptyArray = [];\n    const getId = filteredData.map(chicken => {\n      return emptyArray.push(chicken.id);\n    });\n    props.setId(emptyArray);\n  };\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n  }, []);\n  const cryptoIdArray = [];\n  const displayId = type.map(chicken => {\n    return cryptoIdArray.push(chicken.id);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TokenList, \"M+jsNofGU1yYQ+knp26TVHNxlbE=\");\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js"],"names":["React","useEffect","useState","Bottleneck","TokenList","props","data","setData","type","setType","tickerData","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","makeApiCall","res","fetch","rawData","json","tickers","filteredData","map","duck","id","base","price","last","emptyArray","getId","chicken","push","setId","throttledApiCall","wrap","cryptoIdArray","displayId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMQ,UAAU,GAAG,oDAAnB;AAEA,QAAMC,OAAO,GAAG,IAAIR,UAAJ,CAAe;AAC7BS,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,GAHF;AAK7B;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;;AAUA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,UAAD,CAAvB;AACA,UAAMU,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACAd,IAAAA,OAAO,CAACa,OAAO,CAACE,OAAT,CAAP;AACA,UAAMC,YAAY,GAAGH,OAAO,CAACE,OAAR,CAAgBE,GAAhB,CAAqBC,IAAD,IAAU;AACjD,aAAO;AACLC,QAAAA,EAAE,EAAED,IAAI,CAACE,IADJ;AAELC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAFP,OAAP;AAID,KALoB,CAArB;AAOApB,IAAAA,OAAO,CAACc,YAAD,CAAP;AACA,UAAMO,UAAU,GAAG,EAAnB;AACA,UAAMC,KAAK,GAAGR,YAAY,CAACC,GAAb,CAAkBQ,OAAD,IAAa;AAC1C,aAAOF,UAAU,CAACG,IAAX,CAAgBD,OAAO,CAACN,EAAxB,CAAP;AACD,KAFa,CAAd;AAIArB,IAAAA,KAAK,CAAC6B,KAAN,CAAYJ,UAAZ;AACD,GAlBD;;AAoBA,QAAMK,gBAAgB,GAAGxB,OAAO,CAACyB,IAAR,CAAanB,WAAb,CAAzB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,gBAAgB;AAChBlB,IAAAA,WAAW;AACZ,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMoB,aAAa,GAAG,EAAtB;AACA,QAAMC,SAAS,GAAG9B,IAAI,CAACgB,GAAL,CAAUQ,OAAD,IAAa;AACtC,WAAOK,aAAa,CAACJ,IAAd,CAAmBD,OAAO,CAACN,EAA3B,CAAP;AACD,GAFiB,CAAlB;AAIA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjDD;;GAAMtB,S;;KAAAA,S;AAmDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = (props) => {\n  const [data, setData] = useState([]);\n  const [type, setType] = useState([]);\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    setData(rawData.tickers);\n    const filteredData = rawData.tickers.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n\n    setType(filteredData);\n    const emptyArray = [];\n    const getId = filteredData.map((chicken) => {\n      return emptyArray.push(chicken.id);\n    });\n\n    props.setId(emptyArray);\n  };\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n  }, []);\n\n  const cryptoIdArray = [];\n  const displayId = type.map((chicken) => {\n    return cryptoIdArray.push(chicken.id);\n  });\n\n  return <div></div>;\n};\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}