{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\n\nimport TokenList from \"./TokenList\";\nimport tokenList from \"./TokenListApiData\"; // import AggregateInput from \"./AggregateInput\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Crypto = props => {\n  _s();\n\n  console.log(tokenList); // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n  const namesArray = []; // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n  // const displayName = tokenList.map((chicken) => {\n  //   return namesArray.push(chicken.name);\n  // });\n\n  useEffect(() => {\n    getResults();\n  }, [props.cryptoState]);\n\n  const getResults = () => {\n    const searchWord = props.searchWord; // console.log(searchWord);\n\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (tokenList[key].name === searchWord) {\n        result = tokenList[key].id; // console.log(tokenList[key].id);\n      }\n\n      props.setCryptoState(false);\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  };\n\n  console.log(filterData); // setName = displayName;\n  // console.log(name);\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json(); // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n\n    setTokenPrice(rawData);\n    console.log(rawData);\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  }; // console.log(tokenPrice);\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n  // console.log(tokenPrice);\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: makeApiCall,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \"This is crypto component\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Crypto, \"kXZ7kVz+ASZnRnVCsydabpixhyo=\");\n\n_c = Crypto;\nexport default Crypto;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crypto\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js"],"names":["React","useState","useEffect","TokenList","tokenList","Crypto","props","console","log","filterData","setFilterData","tokenPrice","setTokenPrice","extractedData","setExtractedData","cryptoAPIQuery","namesArray","getResults","cryptoState","searchWord","newFilter","Object","keys","reduce","result","key","name","id","setCryptoState","makeApiCall","res","fetch","rawData","json","tokenPriceArray","obj1","obj2","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\nimport TokenList from \"./TokenList\";\nimport tokenList from \"./TokenListApiData\";\n// import AggregateInput from \"./AggregateInput\";\n\nconst Crypto = (props) => {\n  console.log(tokenList);\n\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n\n  const namesArray = [];\n  // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n\n  // const displayName = tokenList.map((chicken) => {\n  //   return namesArray.push(chicken.name);\n  // });\n\n  useEffect(() => {\n    getResults();\n  }, [props.cryptoState]);\n\n  const getResults = () => {\n    const searchWord = props.searchWord;\n    // console.log(searchWord);\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (tokenList[key].name === searchWord) {\n        result = tokenList[key].id;\n        // console.log(tokenList[key].id);\n      }\n      props.setCryptoState(false);\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  };\n  console.log(filterData);\n  // setName = displayName;\n  // console.log(name);\n\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n    // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n    setTokenPrice(rawData);\n    console.log(rawData);\n\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  };\n\n  // console.log(tokenPrice);\n\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n\n  // console.log(tokenPrice);\n\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n  return (\n    <div>\n      {/* <br />\n    <h2>Select a token</h2>\n    <DropdownList data={namesArray} onChange={handleSearchFilter} /> */}\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <Result type={type} />\n    <div>Token price : ${extractedData}</div> */}\n      This is crypto component\n    </div>\n  );\n};\n\nexport default Crypto;\n"]},"metadata":{},"sourceType":"module"}