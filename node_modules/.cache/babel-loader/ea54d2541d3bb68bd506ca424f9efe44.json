{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\n\nimport TokenList from \"./TokenList\"; // import AggregateInput from \"./AggregateInput\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Crypto = props => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // console.log(props.aggregatedSearch);\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n  const namesArray = []; // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n\n  const displayName = tokenList.map(chicken => {\n    return namesArray.push(chicken.name);\n  });\n\n  const handleSearchFilter = () => {\n    _s();\n\n    // setQuery(event);\n    const searchWord = props.searchWord; // console.log(searchWord);\n\n    const newFilter = Object.keys(TokenList).reduce((result, key) => {\n      if (TokenList[key].name.includes(searchWord)) {\n        result = TokenList[key].id; // console.log(tokenList[key].id);\n      }\n\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n    useEffect(() => {\n      makeApiCall();\n    }, []);\n\n    const makeApiCall = async () => {\n      const res = await fetch(cryptoAPIQuery);\n      const rawData = await res.json(); // console.log(rawData);\n      //   const rawDataArray = [rawData];\n      //   // console.log(rawDataArray);\n      // const sortToken = tokenList.map((chicken) => {\n      //   return {\n      //     tokenPrice: chicken.usd,\n      //   };\n      // });\n\n      setTokenPrice(rawData);\n      console.log(rawData);\n      const tokenPriceArray = [rawData];\n      const obj1 = tokenPriceArray[0];\n      console.log(obj1);\n      const obj2 = obj1[Object.keys(obj1)[0]];\n      console.log(obj2);\n      const value = obj2[Object.keys(obj2)[0]];\n      console.log(value);\n      setExtractedData(value);\n    };\n  }; // setName = displayName;\n  // console.log(name);\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n\n  _s(handleSearchFilter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json(); // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n\n    setTokenPrice(rawData);\n    console.log(rawData);\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  }; // console.log(tokenPrice);\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n  // console.log(tokenPrice);\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: makeApiCall,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), \"This is crypto component\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Crypto, \"AG+oXk++P3awreHTiCdHHsKtJ6Q=\");\n\n_c = Crypto;\nexport default Crypto;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crypto\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js"],"names":["React","useState","useEffect","TokenList","Crypto","props","filterData","setFilterData","tokenPrice","setTokenPrice","extractedData","setExtractedData","cryptoAPIQuery","namesArray","displayName","tokenList","map","chicken","push","name","handleSearchFilter","searchWord","newFilter","Object","keys","reduce","result","key","includes","id","makeApiCall","res","fetch","rawData","json","console","log","tokenPriceArray","obj1","obj2","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\nimport TokenList from \"./TokenList\";\n// import AggregateInput from \"./AggregateInput\";\n\nconst Crypto = (props) => {\n  // console.log(props.aggregatedSearch);\n\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n\n  const namesArray = [];\n  // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n\n  const displayName = tokenList.map((chicken) => {\n    return namesArray.push(chicken.name);\n  });\n\n  const handleSearchFilter = () => {\n    // setQuery(event);\n    const searchWord = props.searchWord;\n    // console.log(searchWord);\n    const newFilter = Object.keys(TokenList).reduce((result, key) => {\n      if (TokenList[key].name.includes(searchWord)) {\n        result = TokenList[key].id;\n        // console.log(tokenList[key].id);\n      }\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n\n    useEffect(() => {\n      makeApiCall();\n    }, []);\n\n    const makeApiCall = async () => {\n      const res = await fetch(cryptoAPIQuery);\n      const rawData = await res.json();\n      // console.log(rawData);\n      //   const rawDataArray = [rawData];\n      //   // console.log(rawDataArray);\n      // const sortToken = tokenList.map((chicken) => {\n      //   return {\n      //     tokenPrice: chicken.usd,\n      //   };\n      // });\n      setTokenPrice(rawData);\n      console.log(rawData);\n\n      const tokenPriceArray = [rawData];\n      const obj1 = tokenPriceArray[0];\n      console.log(obj1);\n\n      const obj2 = obj1[Object.keys(obj1)[0]];\n      console.log(obj2);\n\n      const value = obj2[Object.keys(obj2)[0]];\n      console.log(value);\n      setExtractedData(value);\n    };\n  };\n\n  // setName = displayName;\n  // console.log(name);\n\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n    // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n    setTokenPrice(rawData);\n    console.log(rawData);\n\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  };\n\n  // console.log(tokenPrice);\n\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n\n  // console.log(tokenPrice);\n\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n  return (\n    <div>\n      {/* <br />\n    <h2>Select a token</h2>\n    <DropdownList data={namesArray} onChange={handleSearchFilter} /> */}\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <Result type={type} />\n    <div>Token price : ${extractedData}</div> */}\n      This is crypto component\n    </div>\n  );\n};\n\nexport default Crypto;\n"]},"metadata":{},"sourceType":"module"}