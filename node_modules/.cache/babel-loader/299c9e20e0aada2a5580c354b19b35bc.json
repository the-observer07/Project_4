{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/AggregateInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport commodityList from \"./CommodityList\";\nimport forexList from \"./ForexList\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport TokenList from \"./TokenList\";\nimport Crypto from \"./Crypto\";\nimport Forex from \"./Forex\";\nimport Commodity from \"./Commodity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AggregateInput = props => {\n  _s();\n\n  //   console.log(commodityList);\n  //   console.log(forexList);\n  const forexNameArray = [];\n  const forexName = forexList.map(chicken => {\n    return forexNameArray.push(chicken.name);\n  }); //   console.log(forexNameArray);\n\n  const [id, setId] = useState([]);\n  const [aggregatedSearch, setAggregatedSearch] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [forexState, setForexState] = useState(false);\n  const [cryptoState, setCryptoState] = useState(false); //   console.log(id);\n\n  const aggregatedArray = [];\n  const mergeForex = forexNameArray.map(chicken => {\n    return aggregatedArray.push(chicken);\n  });\n  const mergeCrypto = id.map(chicken => {\n    return aggregatedArray.push(chicken);\n  });\n  const mergeCommodity = commodityList.map(chicken => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const handleSearchAggregate = event => {\n    const searchWord = event;\n\n    if (commodityList.indexOf(searchWord) != -1) {\n      //commodity search\n      //   console.log(commodityList.indexOf(searchWord));\n      setContent( /*#__PURE__*/_jsxDEV(Commodity, {\n        searchWord: searchWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this));\n    } else if (forexList.find(element => element.name === searchWord) != undefined) {\n      setContent( /*#__PURE__*/_jsxDEV(Forex, {\n        searchWord: searchWord,\n        forexState: forexState,\n        setForexState: setForexState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)); //   setState(true);\n      // forex search\n    } else {\n      setContent( /*#__PURE__*/_jsxDEV(Crypto, {\n        searchWord: searchWord,\n        cryptoState: cryptoState,\n        setCryptoState: setCryptoState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n  }; //   console.log(aggregatedSearch);\n  //   console.log(content);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DropdownList, {\n      data: aggregatedArray,\n      onChange: handleSearchAggregate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenList, {\n      id: id,\n      setId: setId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AggregateInput, \"FDnTmR9ZBoHuFc1FKjxXa1Q2MbM=\");\n\n_c = AggregateInput;\nexport default AggregateInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"AggregateInput\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/AggregateInput.js"],"names":["React","useState","commodityList","forexList","DropdownList","TokenList","Crypto","Forex","Commodity","AggregateInput","props","forexNameArray","forexName","map","chicken","push","name","id","setId","aggregatedSearch","setAggregatedSearch","content","setContent","forexState","setForexState","cryptoState","setCryptoState","aggregatedArray","mergeForex","mergeCrypto","mergeCommodity","handleSearchAggregate","event","searchWord","indexOf","find","element","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport commodityList from \"./CommodityList\";\nimport forexList from \"./ForexList\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport TokenList from \"./TokenList\";\nimport Crypto from \"./Crypto\";\nimport Forex from \"./Forex\";\nimport Commodity from \"./Commodity\";\n\nconst AggregateInput = (props) => {\n  //   console.log(commodityList);\n\n  //   console.log(forexList);\n\n  const forexNameArray = [];\n  const forexName = forexList.map((chicken) => {\n    return forexNameArray.push(chicken.name);\n  });\n  //   console.log(forexNameArray);\n\n  const [id, setId] = useState([]);\n  const [aggregatedSearch, setAggregatedSearch] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [forexState, setForexState] = useState(false);\n  const [cryptoState, setCryptoState] = useState(false);\n  //   console.log(id);\n\n  const aggregatedArray = [];\n\n  const mergeForex = forexNameArray.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const mergeCrypto = id.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const mergeCommodity = commodityList.map((chicken) => {\n    return aggregatedArray.push(chicken);\n  });\n\n  const handleSearchAggregate = (event) => {\n    const searchWord = event;\n\n    if (commodityList.indexOf(searchWord) != -1) {\n      //commodity search\n      //   console.log(commodityList.indexOf(searchWord));\n      setContent(<Commodity searchWord={searchWord} />);\n    } else if (\n      forexList.find((element) => element.name === searchWord) != undefined\n    ) {\n      setContent(\n        <Forex\n          searchWord={searchWord}\n          forexState={forexState}\n          setForexState={setForexState}\n        />\n      );\n      //   setState(true);\n      // forex search\n    } else {\n      setContent(\n        <Crypto\n          searchWord={searchWord}\n          cryptoState={cryptoState}\n          setCryptoState={setCryptoState}\n        />\n      );\n    }\n  };\n  //   console.log(aggregatedSearch);\n\n  //   console.log(content);\n\n  return (\n    <div>\n      <DropdownList data={aggregatedArray} onChange={handleSearchAggregate} />\n      {/* <button>Submit</button> */}\n      <TokenList id={id} setId={setId} />\n      {/* <Forex  /> */}\n      {content}\n    </div>\n  );\n};\n\nexport default AggregateInput;\n"]},"metadata":{},"sourceType":"module"}