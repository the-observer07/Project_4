{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.toItemArray = toItemArray;\nexports.chunk = chunk;\nexports.groupBySortedKeys = groupBySortedKeys;\nexports.has = exports.makeArray = void 0;\n\nvar _tinyWarning = _interopRequireDefault(require(\"tiny-warning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n\n\nfunction toItemArray(a) {\n  if (Array.isArray(a)) return a;\n  return [];\n}\n\nconst makeArray = function (obj) {\n  let excludeNull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const result = [];\n  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);\n};\n\nexports.makeArray = makeArray;\n\nconst has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;\n\nexports.has = has;\n\nfunction chunk(array, chunkSize) {\n  let index = 0;\n  let length = array ? array.length : 0;\n  let result = [];\n  chunkSize = Math.max(+chunkSize || 1, 1);\n\n  while (index < length) result.push(array.slice(index, index += chunkSize));\n\n  return result;\n}\n\nfunction groupBySortedKeys(groupBy, data) {\n  let _keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  const iter = typeof groupBy === 'function' ? groupBy : item => item[groupBy];\n  (0, _tinyWarning.default)(typeof groupBy !== 'string' || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a ` + `property \\`${groupBy}\\` that doesn't exist in the dataset items, this may be a typo`);\n  const groups = new Map();\n  data.forEach(item => {\n    let group = iter(item);\n    if (groups.has(group)) groups.get(group).push(item);else groups.set(group, [item]);\n  });\n  return Array.from(groups);\n}","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/react-widgets/cjs/_.js"],"names":["exports","__esModule","toItemArray","chunk","groupBySortedKeys","has","makeArray","_tinyWarning","_interopRequireDefault","require","obj","default","a","Array","isArray","excludeNull","result","concat","o","key","Object","prototype","hasOwnProperty","call","array","chunkSize","index","length","Math","max","push","slice","groupBy","data","_keys","iter","item","groups","Map","forEach","group","get","set","from"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.toItemArray = toItemArray;\nexports.chunk = chunk;\nexports.groupBySortedKeys = groupBySortedKeys;\nexports.has = exports.makeArray = void 0;\n\nvar _tinyWarning = _interopRequireDefault(require(\"tiny-warning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction toItemArray(a) {\n  if (Array.isArray(a)) return a;\n  return [];\n}\n\nconst makeArray = (obj, excludeNull = true) => {\n  const result = [];\n  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);\n};\n\nexports.makeArray = makeArray;\n\nconst has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;\n\nexports.has = has;\n\nfunction chunk(array, chunkSize) {\n  let index = 0;\n  let length = array ? array.length : 0;\n  let result = [];\n  chunkSize = Math.max(+chunkSize || 1, 1);\n\n  while (index < length) result.push(array.slice(index, index += chunkSize));\n\n  return result;\n}\n\nfunction groupBySortedKeys(groupBy, data, _keys = []) {\n  const iter = typeof groupBy === 'function' ? groupBy : item => item[groupBy];\n  (0, _tinyWarning.default)(typeof groupBy !== 'string' || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a ` + `property \\`${groupBy}\\` that doesn't exist in the dataset items, this may be a typo`);\n  const groups = new Map();\n  data.forEach(item => {\n    let group = iter(item);\n    if (groups.has(group)) groups.get(group).push(item);else groups.set(group, [item]);\n  });\n  return Array.from(groups);\n}"]},"metadata":{},"sourceType":"script"}