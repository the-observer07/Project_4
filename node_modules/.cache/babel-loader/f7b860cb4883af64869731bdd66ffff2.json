{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport tokenList from \"./TokenListApiData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Crypto = props => {\n  _s();\n\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [otherQuery, setOtherQuery] = useState(\"\"); // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${query}&vs_currencies=USD`;\n  const namesArray = [];\n  const idArray = [];\n  const symbolArray = [];\n  console.log(namesArray);\n  const displayName = tokenList.map(chicken => {\n    return namesArray.push(chicken.name);\n  });\n\n  const handleSearchFilter = event => {\n    // setQuery(event);\n    const searchWord = event; // console.log(searchWord);\n\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = tokenList[key].id;\n      }\n\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  }; // setName = displayName;\n  // console.log(name);\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json(); // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    //   const sortForex = forexList.map((chicken) => {\n    //     return {\n    //       CountryName: chicken.name,\n    //     };\n    //   });\n    //   setForexType(sortForex);\n    //   const filteredData = rawDataArray.map((duck) => {\n    //     return {\n    //       price: duck.data.rates,\n    //       unit: duck.data.unit,\n    //     };\n    //   });\n    //   setType(filteredData);\n  }; // console.log(type);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select a token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownList, {\n      data: namesArray,\n      onChange: handleSearchFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: makeApiCall,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Crypto, \"tv+bCt0M+dGa3M+fpmMUhsQOq+U=\");\n\n_c = Crypto;\nexport default Crypto;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crypto\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js"],"names":["React","useState","useEffect","DropdownList","tokenList","Crypto","props","type","setType","query","setQuery","otherQuery","setOtherQuery","cryptoAPIQuery","namesArray","idArray","symbolArray","console","log","displayName","map","chicken","push","name","handleSearchFilter","event","searchWord","newFilter","Object","keys","reduce","result","key","forexList","includes","id","setFilterData","makeApiCall","res","fetch","rawData","json"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C,CALwB,CAMxB;AACA;;AAEA,QAAMY,cAAc,GAAI,qDAAoDJ,KAAM,oBAAlF;AAEA,QAAMK,UAAU,GAAG,EAAnB;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,WAAW,GAAG,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AAEA,QAAMK,WAAW,GAAGf,SAAS,CAACgB,GAAV,CAAeC,OAAD,IAAa;AAC7C,WAAOP,UAAU,CAACQ,IAAX,CAAgBD,OAAO,CAACE,IAAxB,CAAP;AACD,GAFmB,CAApB;;AAIA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACA,UAAMC,UAAU,GAAGD,KAAnB,CAFoC,CAGpC;;AACA,UAAME,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYzB,SAAZ,EAAuB0B,MAAvB,CAA8B,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC/D,UAAIC,SAAS,CAACD,GAAD,CAAT,CAAeT,IAAf,CAAoBW,QAApB,CAA6BR,UAA7B,CAAJ,EAA8C;AAC5CK,QAAAA,MAAM,GAAG3B,SAAS,CAAC4B,GAAD,CAAT,CAAeG,EAAxB;AACD;;AACD,aAAOJ,MAAP;AACD,KALiB,EAKf,EALe,CAAlB;AAMAK,IAAAA,aAAa,CAACT,SAAD,CAAb;AACD,GAXD,CApBwB,CAiCxB;AACA;AAEA;AACA;AACA;AACA;;;AAEA,QAAMU,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC1B,cAAD,CAAvB;AACA,UAAM2B,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB,CAF8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnBD,CAzCwB,CA6DxB;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAE3B,UAApB;AAAgC,MAAA,QAAQ,EAAEU;AAA1C;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEa,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAxED;;GAAMhC,M;;KAAAA,M;AA0EN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport tokenList from \"./TokenListApiData\";\n\nconst Crypto = (props) => {\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${query}&vs_currencies=USD`;\n\n  const namesArray = [];\n  const idArray = [];\n  const symbolArray = [];\n  console.log(namesArray);\n\n  const displayName = tokenList.map((chicken) => {\n    return namesArray.push(chicken.name);\n  });\n\n  const handleSearchFilter = (event) => {\n    // setQuery(event);\n    const searchWord = event;\n    // console.log(searchWord);\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = tokenList[key].id;\n      }\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  };\n\n  // setName = displayName;\n  // console.log(name);\n\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n    // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    //   const sortForex = forexList.map((chicken) => {\n    //     return {\n    //       CountryName: chicken.name,\n    //     };\n    //   });\n    //   setForexType(sortForex);\n    //   const filteredData = rawDataArray.map((duck) => {\n    //     return {\n    //       price: duck.data.rates,\n    //       unit: duck.data.unit,\n    //     };\n    //   });\n    //   setType(filteredData);\n  };\n  // console.log(type);\n\n  return (\n    <div>\n      <br />\n      <h2>Select a token</h2>\n      <DropdownList data={namesArray} onChange={handleSearchFilter} />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <Result type={type} /> */}\n    </div>\n  );\n};\n\nexport default Crypto;\n"]},"metadata":{},"sourceType":"module"}