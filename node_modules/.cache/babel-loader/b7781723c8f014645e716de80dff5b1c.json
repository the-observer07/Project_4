{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _toConsumableArray = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar BottleneckError, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\n\nJob = /*#__PURE__*/function () {\n  function Job(task, args, options, jobDefaults, rejectOnDrop, Events, _states, Promise) {\n    var _this3 = this;\n\n    _classCallCheck(this, Job);\n\n    this.task = task;\n    this.args = args;\n    this.rejectOnDrop = rejectOnDrop;\n    this.Events = Events;\n    this._states = _states;\n    this.Promise = Promise;\n    this.options = parser.load(options, jobDefaults);\n    this.options.priority = this._sanitizePriority(this.options.priority);\n\n    if (this.options.id === jobDefaults.id) {\n      this.options.id = \"\".concat(this.options.id, \"-\").concat(this._randomIndex());\n    }\n\n    this.promise = new this.Promise(function (_resolve, _reject) {\n      _this3._resolve = _resolve;\n      _this3._reject = _reject;\n    });\n    this.retryCount = 0;\n  }\n\n  _createClass(Job, [{\n    key: \"_sanitizePriority\",\n    value: function _sanitizePriority(priority) {\n      var sProperty;\n      sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;\n\n      if (sProperty < 0) {\n        return 0;\n      } else if (sProperty > NUM_PRIORITIES - 1) {\n        return NUM_PRIORITIES - 1;\n      } else {\n        return sProperty;\n      }\n    }\n  }, {\n    key: \"_randomIndex\",\n    value: function _randomIndex() {\n      return Math.random().toString(36).slice(2);\n    }\n  }, {\n    key: \"doDrop\",\n    value: function doDrop() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          error = _ref.error,\n          _ref$message = _ref.message,\n          message = _ref$message === void 0 ? \"This job has been dropped by Bottleneck\" : _ref$message;\n\n      if (this._states.remove(this.options.id)) {\n        if (this.rejectOnDrop) {\n          this._reject(error != null ? error : new BottleneckError(message));\n        }\n\n        this.Events.trigger(\"dropped\", {\n          args: this.args,\n          options: this.options,\n          task: this.task,\n          promise: this.promise\n        });\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"_assertStatus\",\n    value: function _assertStatus(expected) {\n      var status;\n      status = this._states.jobStatus(this.options.id);\n\n      if (!(status === expected || expected === \"DONE\" && status === null)) {\n        throw new BottleneckError(\"Invalid job status \".concat(status, \", expected \").concat(expected, \". Please open an issue at https://github.com/SGrondin/bottleneck/issues\"));\n      }\n    }\n  }, {\n    key: \"doReceive\",\n    value: function doReceive() {\n      this._states.start(this.options.id);\n\n      return this.Events.trigger(\"received\", {\n        args: this.args,\n        options: this.options\n      });\n    }\n  }, {\n    key: \"doQueue\",\n    value: function doQueue(reachedHWM, blocked) {\n      this._assertStatus(\"RECEIVED\");\n\n      this._states.next(this.options.id);\n\n      return this.Events.trigger(\"queued\", {\n        args: this.args,\n        options: this.options,\n        reachedHWM: reachedHWM,\n        blocked: blocked\n      });\n    }\n  }, {\n    key: \"doRun\",\n    value: function doRun() {\n      if (this.retryCount === 0) {\n        this._assertStatus(\"QUEUED\");\n\n        this._states.next(this.options.id);\n      } else {\n        this._assertStatus(\"EXECUTING\");\n      }\n\n      return this.Events.trigger(\"scheduled\", {\n        args: this.args,\n        options: this.options\n      });\n    }\n  }, {\n    key: \"doExecute\",\n    value: function doExecute(chained, clearGlobalState, run, free) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var error, eventInfo, passed;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this.retryCount === 0) {\n                  _this._assertStatus(\"RUNNING\");\n\n                  _this._states.next(_this.options.id);\n                } else {\n                  _this._assertStatus(\"EXECUTING\");\n                }\n\n                eventInfo = {\n                  args: _this.args,\n                  options: _this.options,\n                  retryCount: _this.retryCount\n                };\n\n                _this.Events.trigger(\"executing\", eventInfo);\n\n                _context.prev = 3;\n                _context.next = 6;\n                return chained != null ? chained.schedule.apply(chained, [_this.options, _this.task].concat(_toConsumableArray(_this.args))) : _this.task.apply(_this, _toConsumableArray(_this.args));\n\n              case 6:\n                passed = _context.sent;\n\n                if (!clearGlobalState()) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _this.doDone(eventInfo);\n\n                _context.next = 11;\n                return free(_this.options, eventInfo);\n\n              case 11:\n                _this._assertStatus(\"DONE\");\n\n                return _context.abrupt(\"return\", _this._resolve(passed));\n\n              case 13:\n                _context.next = 19;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](3);\n                error = _context.t0;\n                return _context.abrupt(\"return\", _this._onFailure(error, eventInfo, clearGlobalState, run, free));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 15]]);\n      }))();\n    }\n  }, {\n    key: \"doExpire\",\n    value: function doExpire(clearGlobalState, run, free) {\n      var error, eventInfo;\n\n      if (this._states.jobStatus(this.options.id === \"RUNNING\")) {\n        this._states.next(this.options.id);\n      }\n\n      this._assertStatus(\"EXECUTING\");\n\n      eventInfo = {\n        args: this.args,\n        options: this.options,\n        retryCount: this.retryCount\n      };\n      error = new BottleneckError(\"This job timed out after \".concat(this.options.expiration, \" ms.\"));\n      return this._onFailure(error, eventInfo, clearGlobalState, run, free);\n    }\n  }, {\n    key: \"_onFailure\",\n    value: function _onFailure(error, eventInfo, clearGlobalState, run, free) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var retry, retryAfter;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!clearGlobalState()) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this2.Events.trigger(\"failed\", error, eventInfo);\n\n              case 3:\n                retry = _context2.sent;\n\n                if (!(retry != null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                retryAfter = ~~retry;\n\n                _this2.Events.trigger(\"retry\", \"Retrying \".concat(_this2.options.id, \" after \").concat(retryAfter, \" ms\"), eventInfo);\n\n                _this2.retryCount++;\n                return _context2.abrupt(\"return\", run(retryAfter));\n\n              case 11:\n                _this2.doDone(eventInfo);\n\n                _context2.next = 14;\n                return free(_this2.options, eventInfo);\n\n              case 14:\n                _this2._assertStatus(\"DONE\");\n\n                return _context2.abrupt(\"return\", _this2._reject(error));\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }, {\n    key: \"doDone\",\n    value: function doDone(eventInfo) {\n      this._assertStatus(\"EXECUTING\");\n\n      this._states.next(this.options.id);\n\n      return this.Events.trigger(\"done\", eventInfo);\n    }\n  }]);\n\n  return Job;\n}();\n\nmodule.exports = Job;","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/bottleneck/lib/Job.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","BottleneckError","DEFAULT_PRIORITY","Job","NUM_PRIORITIES","parser","require","task","options","jobDefaults","rejectOnDrop","Events","_states","load","priority","_sanitizePriority","id","_randomIndex","promise","_resolve","_reject","retryCount","sProperty","Math","random","toString","slice","message","remove","trigger","expected","status","jobStatus","start","reachedHWM","blocked","_assertStatus","next","chained","clearGlobalState","run","free","_this","eventInfo","schedule","passed","doDone","_onFailure","expiration","_this2","retry","retryAfter","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar BottleneckError, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser;\nNUM_PRIORITIES = 10;\nDEFAULT_PRIORITY = 5;\nparser = require(\"./parser\");\nBottleneckError = require(\"./BottleneckError\");\nJob = class Job {\n  constructor(task, args, options, jobDefaults, rejectOnDrop, Events, _states, Promise) {\n    this.task = task;\n    this.args = args;\n    this.rejectOnDrop = rejectOnDrop;\n    this.Events = Events;\n    this._states = _states;\n    this.Promise = Promise;\n    this.options = parser.load(options, jobDefaults);\n    this.options.priority = this._sanitizePriority(this.options.priority);\n\n    if (this.options.id === jobDefaults.id) {\n      this.options.id = `${this.options.id}-${this._randomIndex()}`;\n    }\n\n    this.promise = new this.Promise((_resolve, _reject) => {\n      this._resolve = _resolve;\n      this._reject = _reject;\n    });\n    this.retryCount = 0;\n  }\n\n  _sanitizePriority(priority) {\n    var sProperty;\n    sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;\n\n    if (sProperty < 0) {\n      return 0;\n    } else if (sProperty > NUM_PRIORITIES - 1) {\n      return NUM_PRIORITIES - 1;\n    } else {\n      return sProperty;\n    }\n  }\n\n  _randomIndex() {\n    return Math.random().toString(36).slice(2);\n  }\n\n  doDrop({\n    error,\n    message = \"This job has been dropped by Bottleneck\"\n  } = {}) {\n    if (this._states.remove(this.options.id)) {\n      if (this.rejectOnDrop) {\n        this._reject(error != null ? error : new BottleneckError(message));\n      }\n\n      this.Events.trigger(\"dropped\", {\n        args: this.args,\n        options: this.options,\n        task: this.task,\n        promise: this.promise\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  _assertStatus(expected) {\n    var status;\n    status = this._states.jobStatus(this.options.id);\n\n    if (!(status === expected || expected === \"DONE\" && status === null)) {\n      throw new BottleneckError(`Invalid job status ${status}, expected ${expected}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`);\n    }\n  }\n\n  doReceive() {\n    this._states.start(this.options.id);\n\n    return this.Events.trigger(\"received\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doQueue(reachedHWM, blocked) {\n    this._assertStatus(\"RECEIVED\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"queued\", {\n      args: this.args,\n      options: this.options,\n      reachedHWM,\n      blocked\n    });\n  }\n\n  doRun() {\n    if (this.retryCount === 0) {\n      this._assertStatus(\"QUEUED\");\n\n      this._states.next(this.options.id);\n    } else {\n      this._assertStatus(\"EXECUTING\");\n    }\n\n    return this.Events.trigger(\"scheduled\", {\n      args: this.args,\n      options: this.options\n    });\n  }\n\n  doExecute(chained, clearGlobalState, run, free) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var error, eventInfo, passed;\n\n      if (_this.retryCount === 0) {\n        _this._assertStatus(\"RUNNING\");\n\n        _this._states.next(_this.options.id);\n      } else {\n        _this._assertStatus(\"EXECUTING\");\n      }\n\n      eventInfo = {\n        args: _this.args,\n        options: _this.options,\n        retryCount: _this.retryCount\n      };\n\n      _this.Events.trigger(\"executing\", eventInfo);\n\n      try {\n        passed = yield chained != null ? chained.schedule(_this.options, _this.task, ..._this.args) : _this.task(..._this.args);\n\n        if (clearGlobalState()) {\n          _this.doDone(eventInfo);\n\n          yield free(_this.options, eventInfo);\n\n          _this._assertStatus(\"DONE\");\n\n          return _this._resolve(passed);\n        }\n      } catch (error1) {\n        error = error1;\n        return _this._onFailure(error, eventInfo, clearGlobalState, run, free);\n      }\n    })();\n  }\n\n  doExpire(clearGlobalState, run, free) {\n    var error, eventInfo;\n\n    if (this._states.jobStatus(this.options.id === \"RUNNING\")) {\n      this._states.next(this.options.id);\n    }\n\n    this._assertStatus(\"EXECUTING\");\n\n    eventInfo = {\n      args: this.args,\n      options: this.options,\n      retryCount: this.retryCount\n    };\n    error = new BottleneckError(`This job timed out after ${this.options.expiration} ms.`);\n    return this._onFailure(error, eventInfo, clearGlobalState, run, free);\n  }\n\n  _onFailure(error, eventInfo, clearGlobalState, run, free) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var retry, retryAfter;\n\n      if (clearGlobalState()) {\n        retry = yield _this2.Events.trigger(\"failed\", error, eventInfo);\n\n        if (retry != null) {\n          retryAfter = ~~retry;\n\n          _this2.Events.trigger(\"retry\", `Retrying ${_this2.options.id} after ${retryAfter} ms`, eventInfo);\n\n          _this2.retryCount++;\n          return run(retryAfter);\n        } else {\n          _this2.doDone(eventInfo);\n\n          yield free(_this2.options, eventInfo);\n\n          _this2._assertStatus(\"DONE\");\n\n          return _this2._reject(error);\n        }\n      }\n    })();\n  }\n\n  doDone(eventInfo) {\n    this._assertStatus(\"EXECUTING\");\n\n    this._states.next(this.options.id);\n\n    return this.Events.trigger(\"done\", eventInfo);\n  }\n\n};\nmodule.exports = Job;"]},"metadata":{},"sourceType":"script"}