{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Batcher, Events, parser;\nparser = require(\"./parser\");\nEvents = require(\"./Events\");\n\nBatcher = function () {\n  var Batcher = /*#__PURE__*/function () {\n    function Batcher() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, Batcher);\n\n      this.options = options;\n      parser.load(this.options, this.defaults, this);\n      this.Events = new Events(this);\n      this._arr = [];\n\n      this._resetPromise();\n\n      this._lastFlush = Date.now();\n    }\n\n    _createClass(Batcher, [{\n      key: \"_resetPromise\",\n      value: function _resetPromise() {\n        var _this = this;\n\n        return this._promise = new this.Promise(function (res, rej) {\n          return _this._resolve = res;\n        });\n      }\n    }, {\n      key: \"_flush\",\n      value: function _flush() {\n        clearTimeout(this._timeout);\n        this._lastFlush = Date.now();\n\n        this._resolve();\n\n        this.Events.trigger(\"batch\", this._arr);\n        this._arr = [];\n        return this._resetPromise();\n      }\n    }, {\n      key: \"add\",\n      value: function add(data) {\n        var _this2 = this;\n\n        var ret;\n\n        this._arr.push(data);\n\n        ret = this._promise;\n\n        if (this._arr.length === this.maxSize) {\n          this._flush();\n        } else if (this.maxTime != null && this._arr.length === 1) {\n          this._timeout = setTimeout(function () {\n            return _this2._flush();\n          }, this.maxTime);\n        }\n\n        return ret;\n      }\n    }]);\n\n    return Batcher;\n  }();\n\n  ;\n  Batcher.prototype.defaults = {\n    maxTime: null,\n    maxSize: null,\n    Promise: Promise\n  };\n  return Batcher;\n}.call(void 0);\n\nmodule.exports = Batcher;","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/bottleneck/lib/Batcher.js"],"names":["Batcher","Events","parser","require","options","load","defaults","_arr","_resetPromise","_lastFlush","Date","now","_promise","Promise","res","rej","_resolve","clearTimeout","_timeout","trigger","data","ret","push","length","maxSize","_flush","maxTime","setTimeout","prototype","call","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAIA,OAAJ,EAAaC,MAAb,EAAqBC,MAArB;AACAA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAhB;AACAF,MAAM,GAAGE,OAAO,CAAC,UAAD,CAAhB;;AAEAH,OAAO,GAAG,YAAY;AAAA,MACdA,OADc;AAElB,uBAA0B;AAAA,UAAdI,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,WAAKA,OAAL,GAAeA,OAAf;AACAF,MAAAA,MAAM,CAACG,IAAP,CAAY,KAAKD,OAAjB,EAA0B,KAAKE,QAA/B,EAAyC,IAAzC;AACA,WAAKL,MAAL,GAAc,IAAIA,MAAJ,CAAW,IAAX,CAAd;AACA,WAAKM,IAAL,GAAY,EAAZ;;AAEA,WAAKC,aAAL;;AAEA,WAAKC,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;AACD;;AAXiB;AAAA;AAAA,aAalB,yBAAgB;AAAA;;AACd,eAAO,KAAKC,QAAL,GAAgB,IAAI,KAAKC,OAAT,CAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpD,iBAAO,KAAI,CAACC,QAAL,GAAgBF,GAAvB;AACD,SAFsB,CAAvB;AAGD;AAjBiB;AAAA;AAAA,aAmBlB,kBAAS;AACPG,QAAAA,YAAY,CAAC,KAAKC,QAAN,CAAZ;AACA,aAAKT,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;;AAEA,aAAKK,QAAL;;AAEA,aAAKf,MAAL,CAAYkB,OAAZ,CAAoB,OAApB,EAA6B,KAAKZ,IAAlC;AACA,aAAKA,IAAL,GAAY,EAAZ;AACA,eAAO,KAAKC,aAAL,EAAP;AACD;AA5BiB;AAAA;AAAA,aA8BlB,aAAIY,IAAJ,EAAU;AAAA;;AACR,YAAIC,GAAJ;;AAEA,aAAKd,IAAL,CAAUe,IAAV,CAAeF,IAAf;;AAEAC,QAAAA,GAAG,GAAG,KAAKT,QAAX;;AAEA,YAAI,KAAKL,IAAL,CAAUgB,MAAV,KAAqB,KAAKC,OAA9B,EAAuC;AACrC,eAAKC,MAAL;AACD,SAFD,MAEO,IAAI,KAAKC,OAAL,IAAgB,IAAhB,IAAwB,KAAKnB,IAAL,CAAUgB,MAAV,KAAqB,CAAjD,EAAoD;AACzD,eAAKL,QAAL,GAAgBS,UAAU,CAAC,YAAM;AAC/B,mBAAO,MAAI,CAACF,MAAL,EAAP;AACD,WAFyB,EAEvB,KAAKC,OAFkB,CAA1B;AAGD;;AAED,eAAOL,GAAP;AACD;AA9CiB;;AAAA;AAAA;;AAkDpB;AACArB,EAAAA,OAAO,CAAC4B,SAAR,CAAkBtB,QAAlB,GAA6B;AAC3BoB,IAAAA,OAAO,EAAE,IADkB;AAE3BF,IAAAA,OAAO,EAAE,IAFkB;AAG3BX,IAAAA,OAAO,EAAEA;AAHkB,GAA7B;AAKA,SAAOb,OAAP;AACD,CAzDS,CAyDR6B,IAzDQ,CAyDH,KAAK,CAzDF,CAAV;;AA2DAC,MAAM,CAACC,OAAP,GAAiB/B,OAAjB","sourcesContent":["\"use strict\";\n\nvar Batcher, Events, parser;\nparser = require(\"./parser\");\nEvents = require(\"./Events\");\n\nBatcher = function () {\n  class Batcher {\n    constructor(options = {}) {\n      this.options = options;\n      parser.load(this.options, this.defaults, this);\n      this.Events = new Events(this);\n      this._arr = [];\n\n      this._resetPromise();\n\n      this._lastFlush = Date.now();\n    }\n\n    _resetPromise() {\n      return this._promise = new this.Promise((res, rej) => {\n        return this._resolve = res;\n      });\n    }\n\n    _flush() {\n      clearTimeout(this._timeout);\n      this._lastFlush = Date.now();\n\n      this._resolve();\n\n      this.Events.trigger(\"batch\", this._arr);\n      this._arr = [];\n      return this._resetPromise();\n    }\n\n    add(data) {\n      var ret;\n\n      this._arr.push(data);\n\n      ret = this._promise;\n\n      if (this._arr.length === this.maxSize) {\n        this._flush();\n      } else if (this.maxTime != null && this._arr.length === 1) {\n        this._timeout = setTimeout(() => {\n          return this._flush();\n        }, this.maxTime);\n      }\n\n      return ret;\n    }\n\n  }\n\n  ;\n  Batcher.prototype.defaults = {\n    maxTime: null,\n    maxSize: null,\n    Promise: Promise\n  };\n  return Batcher;\n}.call(void 0);\n\nmodule.exports = Batcher;"]},"metadata":{},"sourceType":"script"}