{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\n\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenList = props => {\n  _s();\n\n  // const [totalReactPackages, setTotalReactPackages] = useState(null);\n  // const [state, setState] = useState(\"\");\n  // const [list, setList] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [type, setType] = useState([]);\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    console.log(rawData);\n    console.log(rawData.tickers);\n    setData(rawData.tickers); // const rawDataArray = rawData.tickers;\n    // const filterData = () => {\n\n    const filteredData = rawData.tickers.map(duck => {\n      return {\n        id: duck.base,\n        price: duck.last\n      };\n    });\n    setType(filteredData); // };\n\n    const getId = filteredData.map(chicken => {\n      return {\n        id: chicken.id\n      };\n    });\n    props.setId(getId);\n  };\n\n  console.log(data);\n  console.log(type);\n  const throttledApiCall = limiter.wrap(makeApiCall);\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall(); // filterData();\n  }, []);\n  const cryptoIdArray = [];\n  const displayId = type.map(chicken => {\n    return cryptoIdArray.push(chicken.id);\n  }); // console.log(displayId);\n\n  console.log(cryptoIdArray); // props.setId(cryptoIdArray);\n\n  console.log(props.id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TokenList, \"M+jsNofGU1yYQ+knp26TVHNxlbE=\");\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js"],"names":["React","useEffect","useState","Bottleneck","TokenList","props","data","setData","type","setType","tickerData","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","makeApiCall","res","fetch","rawData","json","console","log","tickers","filteredData","map","duck","id","base","price","last","getId","chicken","setId","throttledApiCall","wrap","cryptoIdArray","displayId","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMQ,UAAU,GAAG,oDAAnB;AAEA,QAAMC,OAAO,GAAG,IAAIR,UAAJ,CAAe;AAC7BS,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,GAHF;AAK7B;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;;AAUA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,UAAD,CAAvB;AACA,UAAMU,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,OAApB;AACAjB,IAAAA,OAAO,CAACa,OAAO,CAACI,OAAT,CAAP,CAL8B,CAM9B;AACA;;AACA,UAAMC,YAAY,GAAGL,OAAO,CAACI,OAAR,CAAgBE,GAAhB,CAAqBC,IAAD,IAAU;AACjD,aAAO;AACLC,QAAAA,EAAE,EAAED,IAAI,CAACE,IADJ;AAELC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAFP,OAAP;AAID,KALoB,CAArB;AAOAtB,IAAAA,OAAO,CAACgB,YAAD,CAAP,CAf8B,CAgB9B;;AACA,UAAMO,KAAK,GAAGP,YAAY,CAACC,GAAb,CAAkBO,OAAD,IAAa;AAC1C,aAAO;AAAEL,QAAAA,EAAE,EAAEK,OAAO,CAACL;AAAd,OAAP;AACD,KAFa,CAAd;AAGAvB,IAAAA,KAAK,CAAC6B,KAAN,CAAYF,KAAZ;AACD,GArBD;;AAsBAV,EAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AAEA,QAAM2B,gBAAgB,GAAGxB,OAAO,CAACyB,IAAR,CAAanB,WAAb,CAAzB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,gBAAgB;AAChBlB,IAAAA,WAAW,GAFG,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMoB,aAAa,GAAG,EAAtB;AACA,QAAMC,SAAS,GAAG9B,IAAI,CAACkB,GAAL,CAAUO,OAAD,IAAa;AACtC,WAAOI,aAAa,CAACE,IAAd,CAAmBN,OAAO,CAACL,EAA3B,CAAP;AACD,GAFiB,CAAlB,CArD2B,CAwD3B;;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYc,aAAZ,EAzD2B,CA2D3B;;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAK,CAACuB,EAAlB;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/DD;;GAAMxB,S;;KAAAA,S;AAiEN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = (props) => {\n  // const [totalReactPackages, setTotalReactPackages] = useState(null);\n  // const [state, setState] = useState(\"\");\n  // const [list, setList] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [type, setType] = useState([]);\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    console.log(rawData);\n    console.log(rawData.tickers);\n    setData(rawData.tickers);\n    // const rawDataArray = rawData.tickers;\n    // const filterData = () => {\n    const filteredData = rawData.tickers.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n\n    setType(filteredData);\n    // };\n    const getId = filteredData.map((chicken) => {\n      return { id: chicken.id };\n    });\n    props.setId(getId);\n  };\n  console.log(data);\n  console.log(type);\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n    // filterData();\n  }, []);\n\n  const cryptoIdArray = [];\n  const displayId = type.map((chicken) => {\n    return cryptoIdArray.push(chicken.id);\n  });\n  // console.log(displayId);\n  console.log(cryptoIdArray);\n\n  // props.setId(cryptoIdArray);\n  console.log(props.id);\n\n  return <div></div>;\n};\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}