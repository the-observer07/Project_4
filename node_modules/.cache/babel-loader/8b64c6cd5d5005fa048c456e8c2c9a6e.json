{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\n\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenList = () => {\n  _s();\n\n  const [totalReactPackages, setTotalReactPackages] = useState(null);\n  const [state, setState] = useState(\"\");\n  const [list, setList] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n  useEffect(() => {\n    throttledApiCall();\n  }, []);\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json(); // console.log(rawData.tickers);\n\n    setData(rawData.tickers);\n  }; // console.log(data);\n\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n  useEffect(() => {\n    filterData();\n  }, []);\n\n  const filterData = () => {\n    const filteredData = data.map(duck => {\n      return {\n        id: duck.base,\n        price: duck.last\n      };\n    });\n    setType(filteredData);\n  };\n\n  const idArray = [];\n  const displayId = type.map(chicken => {\n    return idArray.push(chicken.id);\n  }); // console.log(type);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TokenList, \"CWxytezP5mPHZCTpMddXjS98UzI=\");\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js"],"names":["React","useEffect","useState","Bottleneck","TokenList","totalReactPackages","setTotalReactPackages","state","setState","list","setList","data","setData","type","setType","tickerData","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","throttledApiCall","makeApiCall","res","fetch","rawData","json","tickers","wrap","filterData","filteredData","map","duck","id","base","price","last","idArray","displayId","chicken","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CJ,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMa,UAAU,GAAG,oDAAnB;AAEA,QAAMC,OAAO,GAAG,IAAIb,UAAJ,CAAe;AAC7Bc,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,IAHF;AAK7B;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;AAUApB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACV,UAAD,CAAvB;AACA,UAAMW,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB,CAF8B,CAG9B;;AACAf,IAAAA,OAAO,CAACc,OAAO,CAACE,OAAT,CAAP;AACD,GALD,CAvBsB,CA6BtB;;;AAEA,QAAMN,gBAAgB,GAAGN,OAAO,CAACa,IAAR,CAAaN,WAAb,CAAzB;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMA,UAAU,GAAG,MAAM;AACvB,UAAMC,YAAY,GAAGpB,IAAI,CAACqB,GAAL,CAAUC,IAAD,IAAU;AACtC,aAAO;AACLC,QAAAA,EAAE,EAAED,IAAI,CAACE,IADJ;AAELC,QAAAA,KAAK,EAAEH,IAAI,CAACI;AAFP,OAAP;AAID,KALoB,CAArB;AAMAvB,IAAAA,OAAO,CAACiB,YAAD,CAAP;AACD,GARD;;AAUA,QAAMO,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG1B,IAAI,CAACmB,GAAL,CAAUQ,OAAD,IAAa;AACtC,WAAOF,OAAO,CAACG,IAAR,CAAaD,OAAO,CAACN,EAArB,CAAP;AACD,GAFiB,CAAlB,CA/CsB,CAkDtB;;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArDD;;GAAM9B,S;;KAAAA,S;AAuDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = () => {\n  const [totalReactPackages, setTotalReactPackages] = useState(null);\n  const [state, setState] = useState(\"\");\n  const [list, setList] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [type, setType] = useState(\"\");\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  useEffect(() => {\n    throttledApiCall();\n  }, []);\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    // console.log(rawData.tickers);\n    setData(rawData.tickers);\n  };\n  // console.log(data);\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    filterData();\n  }, []);\n  const filterData = () => {\n    const filteredData = data.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n    setType(filteredData);\n  };\n\n  const idArray = [];\n  const displayId = type.map((chicken) => {\n    return idArray.push(chicken.id);\n  });\n  // console.log(type);\n\n  return <div></div>;\n};\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}