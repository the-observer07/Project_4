{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport Result from \"./Result\"; //============================================================================================================================================================================================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst commodityList = [\"RICE\", \"WHEAT\", \"SUGAR\", \"CORN\", \"WTIOIL\", \"BRENTOIL\", \"SOYBEAN\", \"COFFEE\", \"XAU\", \"XAG\", \"XPD\", \"XPT\", \"XRH\", \"RUBBER\", \"ETHANOL\", \"CPO\", \"NG\"];\n\nconst Commodity = () => {\n  _s();\n\n  const [commodity, setCommodity] = useState(\"\");\n  const [query, setQuery] = useState([]);\n  const [type, setType] = useState([]); // CommodityAPI\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${query}&symbols=USD`; //CryptoAPI\n\n  const cryptoAPI = ``; //Need to consolidate API to decide which to call (if this then that)\n  //Maybe using state, so if state change then select that one?\n  //map the forex array to sort names\n  // thinking maybe i can consolidate the api keywords under consolidatedAPI so that i can do an if, else\n\n  const consolidatedAPI = ``; // console.log(commodityAPI);\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json(); // console.log(rawData);\n\n    const rawDataArray = [rawData]; // console.log(rawDataArray);\n\n    const filteredData = rawDataArray.map(duck => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit\n      };\n    });\n    setType(filteredData);\n  }; // console.log(type);\n\n\n  const handleSelectionChange = event => {\n    setCommodity(event.target.value); // console.log(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select an input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownList, {\n      data: commodityList // forex={forexList}\n      ,\n      onChange: nextValue => setQuery(nextValue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: makeApiCall,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Commodity, \"1QJXdykSAyJTe+GftXwsc1h1xXA=\");\n\n_c = Commodity;\nexport default Commodity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Commodity\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Commodity.js"],"names":["React","useState","useEffect","DropdownList","Result","commodityList","Commodity","commodity","setCommodity","query","setQuery","type","setType","commodityAPI","cryptoAPI","consolidatedAPI","makeApiCall","res","fetch","rawData","json","rawDataArray","filteredData","map","duck","price","data","rates","unit","handleSelectionChange","event","target","value","nextValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;;AAEA,MAAMC,aAAa,GAAG,CACpB,MADoB,EAEpB,OAFoB,EAGpB,OAHoB,EAIpB,MAJoB,EAKpB,QALoB,EAMpB,UANoB,EAOpB,SAPoB,EAQpB,QARoB,EASpB,KAToB,EAUpB,KAVoB,EAWpB,KAXoB,EAYpB,KAZoB,EAapB,KAboB,EAcpB,QAdoB,EAepB,SAfoB,EAgBpB,KAhBoB,EAiBpB,IAjBoB,CAAtB;;AAoBA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CAHsB,CAKtB;;AAEA,QAAMY,YAAY,GAAI,2HAA0HJ,KAAM,cAAtJ,CAPsB,CAStB;;AAEA,QAAMK,SAAS,GAAI,EAAnB,CAXsB,CAatB;AACA;AAEA;AAEA;;AAEA,QAAMC,eAAe,GAAI,EAAzB,CApBsB,CAsBtB;;AAEA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACL,YAAD,CAAvB;AACA,UAAMM,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB,CAF8B,CAI9B;;AAEA,UAAMC,YAAY,GAAG,CAACF,OAAD,CAArB,CAN8B,CAQ9B;;AAEA,UAAMG,YAAY,GAAGD,YAAY,CAACE,GAAb,CAAkBC,IAAD,IAAU;AAC9C,aAAO;AACLC,QAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUC,KADZ;AAELC,QAAAA,IAAI,EAAEJ,IAAI,CAACE,IAAL,CAAUE;AAFX,OAAP;AAID,KALoB,CAArB;AAMAhB,IAAAA,OAAO,CAACU,YAAD,CAAP;AACD,GAjBD,CAxBsB,CA0CtB;;;AAEA,QAAMO,qBAAqB,GAAIC,KAAD,IAAW;AACvCtB,IAAAA,YAAY,CAACsB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ,CADuC,CAEvC;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,IAAI,EAAE3B,aADR,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAG4B,SAAD,IAAevB,QAAQ,CAACuB,SAAD;AAHnC;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAQ,MAAA,OAAO,EAAEjB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eASE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEL;AAAd;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9DD;;GAAML,S;;KAAAA,S;AAgEN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DropdownList } from \"react-widgets/cjs\";\nimport Result from \"./Result\";\n\n//============================================================================================================================================================================================\n\nconst commodityList = [\n  \"RICE\",\n  \"WHEAT\",\n  \"SUGAR\",\n  \"CORN\",\n  \"WTIOIL\",\n  \"BRENTOIL\",\n  \"SOYBEAN\",\n  \"COFFEE\",\n  \"XAU\",\n  \"XAG\",\n  \"XPD\",\n  \"XPT\",\n  \"XRH\",\n  \"RUBBER\",\n  \"ETHANOL\",\n  \"CPO\",\n  \"NG\",\n];\n\nconst Commodity = () => {\n  const [commodity, setCommodity] = useState(\"\");\n  const [query, setQuery] = useState([]);\n  const [type, setType] = useState([]);\n\n  // CommodityAPI\n\n  const commodityAPI = `https://www.commodities-api.com/api/latest?access_key=jhvo01w5j98zhcbi517u32j1mc14wgkh1zwzfp8rx4x3bdzujvnvx6gzody4&base=${query}&symbols=USD`;\n\n  //CryptoAPI\n\n  const cryptoAPI = ``;\n\n  //Need to consolidate API to decide which to call (if this then that)\n  //Maybe using state, so if state change then select that one?\n\n  //map the forex array to sort names\n\n  // thinking maybe i can consolidate the api keywords under consolidatedAPI so that i can do an if, else\n\n  const consolidatedAPI = ``;\n\n  // console.log(commodityAPI);\n\n  const makeApiCall = async () => {\n    const res = await fetch(commodityAPI);\n    const rawData = await res.json();\n\n    // console.log(rawData);\n\n    const rawDataArray = [rawData];\n\n    // console.log(rawDataArray);\n\n    const filteredData = rawDataArray.map((duck) => {\n      return {\n        price: duck.data.rates,\n        unit: duck.data.unit,\n      };\n    });\n    setType(filteredData);\n  };\n  // console.log(type);\n\n  const handleSelectionChange = (event) => {\n    setCommodity(event.target.value);\n    // console.log(event);\n  };\n\n  return (\n    <div>\n      <h2>Select an input</h2>\n      <DropdownList\n        data={commodityList}\n        // forex={forexList}\n        onChange={(nextValue) => setQuery(nextValue)}\n      />\n      <button onClick={makeApiCall}>Submit</button>\n      {/* <p>{query}</p> */}\n      <Result type={type} />\n    </div>\n  );\n};\n\nexport default Commodity;\n"]},"metadata":{},"sourceType":"module"}