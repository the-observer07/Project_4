{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\n\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenList = () => {\n  _s();\n\n  // const [totalReactPackages, setTotalReactPackages] = useState(null);\n  // const [state, setState] = useState(\"\");\n  // const [list, setList] = useState(\"\");\n  const [data, setData] = useState({});\n  const [type, setType] = useState([]);\n  const [id, setId] = useState([]);\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    console.log(rawData);\n    console.log(rawData.tickers);\n    setData(rawData.tickers);\n  };\n\n  console.log(data);\n  const throttledApiCall = limiter.wrap(makeApiCall);\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n    filterData();\n  }, []);\n\n  const filterData = () => {\n    const filteredData = data.map(duck => {\n      return {\n        id: duck.base,\n        price: duck.last\n      };\n    });\n    setType(filteredData);\n    console.log(type);\n  };\n\n  const cryptoIdArray = [];\n  const displayId = type.map(chicken => {\n    return cryptoIdArray.push(chicken.id);\n  }); // console.log(displayId);\n\n  console.log(cryptoIdArray); // setId(cryptoIdArray);\n  // console.log(id);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TokenList, \"zt4cQNqFWB2A6N/CZoOoIztPEyc=\");\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/TokenList.js"],"names":["React","useEffect","useState","Bottleneck","TokenList","data","setData","type","setType","id","setId","tickerData","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","makeApiCall","res","fetch","rawData","json","console","log","tickers","throttledApiCall","wrap","filterData","filteredData","map","duck","base","price","last","cryptoIdArray","displayId","chicken","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,EAAD,EAAKC,KAAL,IAAcR,QAAQ,CAAC,EAAD,CAA5B;AAEA,QAAMS,UAAU,GAAG,oDAAnB;AAEA,QAAMC,OAAO,GAAG,IAAIT,UAAJ,CAAe;AAC7BU,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,GAHF;AAK7B;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;;AAUA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,UAAD,CAAvB;AACA,UAAMU,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,OAApB;AACAnB,IAAAA,OAAO,CAACe,OAAO,CAACI,OAAT,CAAP;AACD,GAND;;AAOAF,EAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AAEA,QAAMqB,gBAAgB,GAAGd,OAAO,CAACe,IAAR,CAAaT,WAAb,CAAzB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,gBAAgB;AAChBR,IAAAA,WAAW;AACXU,IAAAA,UAAU;AACX,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMA,UAAU,GAAG,MAAM;AACvB,UAAMC,YAAY,GAAGxB,IAAI,CAACyB,GAAL,CAAUC,IAAD,IAAU;AACtC,aAAO;AACLtB,QAAAA,EAAE,EAAEsB,IAAI,CAACC,IADJ;AAELC,QAAAA,KAAK,EAAEF,IAAI,CAACG;AAFP,OAAP;AAID,KALoB,CAArB;AAMA1B,IAAAA,OAAO,CAACqB,YAAD,CAAP;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACD,GATD;;AAWA,QAAM4B,aAAa,GAAG,EAAtB;AACA,QAAMC,SAAS,GAAG7B,IAAI,CAACuB,GAAL,CAAUO,OAAD,IAAa;AACtC,WAAOF,aAAa,CAACG,IAAd,CAAmBD,OAAO,CAAC5B,EAA3B,CAAP;AACD,GAFiB,CAAlB,CAjDsB,CAoDtB;;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYW,aAAZ,EArDsB,CAuDtB;AACA;;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA3DD;;GAAM/B,S;;KAAAA,S;AA6DN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import TokenListApiData from \"./TokenListApiData\";\nimport Bottleneck from \"bottleneck\";\n\nconst TokenList = () => {\n  // const [totalReactPackages, setTotalReactPackages] = useState(null);\n  // const [state, setState] = useState(\"\");\n  // const [list, setList] = useState(\"\");\n  const [data, setData] = useState({});\n  const [type, setType] = useState([]);\n  const [id, setId] = useState([]);\n\n  const tickerData = \"https://api.coingecko.com/api/v3/exchanges/binance\";\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 500,\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n\n  const makeApiCall = async () => {\n    const res = await fetch(tickerData);\n    const rawData = await res.json();\n    console.log(rawData);\n    console.log(rawData.tickers);\n    setData(rawData.tickers);\n  };\n  console.log(data);\n\n  const throttledApiCall = limiter.wrap(makeApiCall);\n\n  useEffect(() => {\n    throttledApiCall();\n    makeApiCall();\n    filterData();\n  }, []);\n\n  const filterData = () => {\n    const filteredData = data.map((duck) => {\n      return {\n        id: duck.base,\n        price: duck.last,\n      };\n    });\n    setType(filteredData);\n    console.log(type);\n  };\n\n  const cryptoIdArray = [];\n  const displayId = type.map((chicken) => {\n    return cryptoIdArray.push(chicken.id);\n  });\n  // console.log(displayId);\n  console.log(cryptoIdArray);\n\n  // setId(cryptoIdArray);\n  // console.log(id);\n\n  return <div></div>;\n};\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}