{"ast":null,"code":"import _asyncToGenerator from\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect}from\"react\";// import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\nimport TokenList from\"./TokenList\";import tokenList from\"./TokenListApiData\";import{Button,Container,Row,Col}from\"react-bootstrap\";// import AggregateInput from \"./AggregateInput\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Crypto=function Crypto(props){// console.log(tokenList);\n// console.log(props.token);\n// const [query, setQuery] = useState(\"\");\n// const [type, setType] = useState(\"\");\n// const [query, setQuery] = useState(\"\");\n// const [otherQuery, setOtherQuery] = useState(\"\");\n// const [name, setName] = useState(\"\");\n// const tokenName = tokenList[i].name;\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),filterData=_useState2[0],setFilterData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),tokenPrice=_useState4[0],setTokenPrice=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),extractedData=_useState6[0],setExtractedData=_useState6[1];var cryptoAPIQuery=\"https://api.coingecko.com/api/v3/simple/price?ids=\".concat(filterData,\"&vs_currencies=USD\");var namesArray=[];// const idArray = [];\n// const symbolArray = [];\n// console.log(namesArray);\n// const displayName = tokenList.map((chicken) => {\n//   return namesArray.push(chicken.name);\n// });\nuseEffect(function(){getResults();},[props.cryptoState]);var getResults=function getResults(){var searchWord=props.searchWord;// console.log(searchWord);\nvar newFilter=Object.keys(tokenList).reduce(function(result,key){if(tokenList[key].name.match(searchWord)){result=tokenList[key].id;// console.log(tokenList[key].id);\n}// props.setCryptoState(false);\nreturn result;},\"\");setFilterData(newFilter);};console.log(filterData);console.log(cryptoAPIQuery);// setName = displayName;\n// console.log(name);\n// useEffect(() => {\n// displayName();\n// }, []);\n// const cryptoList = [{props.token}];\nvar makeApiCall=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res,rawData,tokenPriceArray,obj1,obj2,value;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(cryptoAPIQuery);case 2:res=_context.sent;_context.next=5;return res.json();case 5:rawData=_context.sent;// console.log(rawData);\n//   const rawDataArray = [rawData];\n//   // console.log(rawDataArray);\n// const sortToken = tokenList.map((chicken) => {\n//   return {\n//     tokenPrice: chicken.usd,\n//   };\n// });\nsetTokenPrice(rawData);console.log(rawData);tokenPriceArray=[rawData];obj1=tokenPriceArray[0];console.log(obj1);obj2=obj1[Object.keys(obj1)[0]];console.log(obj2);value=obj2[Object.keys(obj2)[0]];console.log(value);setExtractedData(value);case 16:case\"end\":return _context.stop();}}},_callee);}));return function makeApiCall(){return _ref.apply(this,arguments);};}();// console.log(tokenPrice);\n// setExtractedData = value;\n//   const filteredData = rawDataArray.map((duck) => {\n//     return {\n//       price: duck.data.rates,\n//       unit: duck.data.unit,\n//     };\n//   });\n//   setType(filteredData);\n// console.log(tokenPrice);\n// const tokenPriceArray = [tokenPrice];\n// const obj1 = tokenPriceArray[0];\n// const obj2 = obj1[Object.keys(obj1)[0]];\n// console.log(obj2);\n// const value = obj2[Object.keys(obj2)[0]];\n// console.log(tokenPriceArray);\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{onClick:makeApiCall,size:\"lg\",children:\"Submit\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"data\",children:[\"Token price : $\",extractedData]}),/*#__PURE__*/_jsx(\"br\",{})]});};export default Crypto;","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Crypto.js"],"names":["React","useState","useEffect","TokenList","tokenList","Button","Container","Row","Col","Crypto","props","filterData","setFilterData","tokenPrice","setTokenPrice","extractedData","setExtractedData","cryptoAPIQuery","namesArray","getResults","cryptoState","searchWord","newFilter","Object","keys","reduce","result","key","name","match","id","console","log","makeApiCall","fetch","res","json","rawData","tokenPriceArray","obj1","obj2","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { DropdownList } from \"react-widgets/cjs\";\n// import tokenList from \"./TokenListApiData\";\nimport TokenList from \"./TokenList\";\nimport tokenList from \"./TokenListApiData\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n// import AggregateInput from \"./AggregateInput\";\n\nconst Crypto = (props) => {\n  // console.log(tokenList);\n\n  // console.log(props.token);\n  // const [query, setQuery] = useState(\"\");\n  // const [type, setType] = useState(\"\");\n  // const [query, setQuery] = useState(\"\");\n  // const [otherQuery, setOtherQuery] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const tokenName = tokenList[i].name;\n  const [filterData, setFilterData] = useState(\"\");\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const [extractedData, setExtractedData] = useState(\"\");\n\n  const cryptoAPIQuery = `https://api.coingecko.com/api/v3/simple/price?ids=${filterData}&vs_currencies=USD`;\n\n  const namesArray = [];\n  // const idArray = [];\n  // const symbolArray = [];\n  // console.log(namesArray);\n\n  // const displayName = tokenList.map((chicken) => {\n  //   return namesArray.push(chicken.name);\n  // });\n\n  useEffect(() => {\n    getResults();\n  }, [props.cryptoState]);\n\n  const getResults = () => {\n    const searchWord = props.searchWord;\n    // console.log(searchWord);\n    const newFilter = Object.keys(tokenList).reduce((result, key) => {\n      if (tokenList[key].name.match(searchWord)) {\n        result = tokenList[key].id;\n        // console.log(tokenList[key].id);\n      }\n      // props.setCryptoState(false);\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n  };\n  console.log(filterData);\n  console.log(cryptoAPIQuery);\n  // setName = displayName;\n  // console.log(name);\n\n  // useEffect(() => {\n  // displayName();\n  // }, []);\n  // const cryptoList = [{props.token}];\n\n  const makeApiCall = async () => {\n    const res = await fetch(cryptoAPIQuery);\n    const rawData = await res.json();\n    // console.log(rawData);\n    //   const rawDataArray = [rawData];\n    //   // console.log(rawDataArray);\n    // const sortToken = tokenList.map((chicken) => {\n    //   return {\n    //     tokenPrice: chicken.usd,\n    //   };\n    // });\n    setTokenPrice(rawData);\n    console.log(rawData);\n\n    const tokenPriceArray = [rawData];\n    const obj1 = tokenPriceArray[0];\n    console.log(obj1);\n\n    const obj2 = obj1[Object.keys(obj1)[0]];\n    console.log(obj2);\n\n    const value = obj2[Object.keys(obj2)[0]];\n    console.log(value);\n    setExtractedData(value);\n  };\n\n  // console.log(tokenPrice);\n\n  // setExtractedData = value;\n  //   const filteredData = rawDataArray.map((duck) => {\n  //     return {\n  //       price: duck.data.rates,\n  //       unit: duck.data.unit,\n  //     };\n  //   });\n  //   setType(filteredData);\n\n  // console.log(tokenPrice);\n\n  // const tokenPriceArray = [tokenPrice];\n  // const obj1 = tokenPriceArray[0];\n\n  // const obj2 = obj1[Object.keys(obj1)[0]];\n  // console.log(obj2);\n\n  // const value = obj2[Object.keys(obj2)[0]];\n  // console.log(tokenPriceArray);\n\n  return (\n    <div>\n      <br />\n      <Button onClick={makeApiCall} size=\"lg\">\n        Submit\n      </Button>\n      <br />\n      <br />\n      <br />\n      <div className=\"data\">Token price : ${extractedData}</div>\n      <br />\n      {/* <Result type={type} /> */}\n    </div>\n  );\n};\n\nexport default Crypto;\n"]},"metadata":{},"sourceType":"module"}