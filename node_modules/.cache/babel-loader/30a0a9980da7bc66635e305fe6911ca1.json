{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownList, SlideTransitionGroup } from \"react-widgets/cjs\"; // import Result from \"./Result\";\n\nimport AggregateInput from \"./AggregateInput\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\"; // import Commodity from \"./Commodity\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst forexList = [{\n  id: \"AED\",\n  name: \"United Arab Emirates Dirham\"\n}, {\n  id: \"AFN\",\n  name: \"Afghan Afghani\"\n}, {\n  id: \"ALL\",\n  name: \"Albanian Lek\"\n}, {\n  id: \"AMD\",\n  name: \"Armenian Dram\"\n}, {\n  id: \"ANG\",\n  name: \"Netherlands Antillean Guilder\"\n}, {\n  id: \"AOA\",\n  name: \"Angolan Kwanza\"\n}, {\n  id: \"ARS\",\n  name: \"Argentine Peso\"\n}, {\n  id: \"AUD\",\n  name: \"Australian Dollar\"\n}, {\n  id: \"AWG\",\n  name: \"Aruban Florin\"\n}, {\n  id: \"AZN\",\n  name: \"Azerbaijani Manat\"\n}, {\n  id: \"BAM\",\n  name: \"Bosnia-Herzegovina Convertible Mark\"\n}, {\n  id: \"BBD\",\n  name: \"Barbadian Dollar\"\n}, {\n  id: \"BDT\",\n  name: \"Bangladeshi Taka\"\n}, {\n  id: \"BGN\",\n  name: \"Bulgarian Lev\"\n}, {\n  id: \"BHD\",\n  name: \"Bahraini Dinar\"\n}, {\n  id: \"BIF\",\n  name: \"Burundian Franc\"\n}, {\n  id: \"BMD\",\n  name: \"Bermudan Dollar\"\n}, {\n  id: \"BND\",\n  name: \"Brunei Dollar\"\n}, {\n  id: \"BOB\",\n  name: \"Bolivian Boliviano\"\n}, {\n  id: \"BRL\",\n  name: \"Brazilian Real\"\n}, {\n  id: \"BSD\",\n  name: \"Bahamian Dollar\"\n}, {\n  id: \"BTC\",\n  name: \"Bitcoin\"\n}, {\n  id: \"BTN\",\n  name: \"Bhutanese Ngultrum\"\n}, {\n  id: \"BWP\",\n  name: \"Botswanan Pula\"\n}, {\n  id: \"BYR\",\n  name: \"Belarusian Ruble\"\n}, {\n  id: \"BZD\",\n  name: \"Belize Dollar\"\n}, {\n  id: \"CAD\",\n  name: \"Canadian Dollar\"\n}, {\n  id: \"CDF\",\n  name: \"Congolese Franc\"\n}, {\n  id: \"CHF\",\n  name: \"Swiss Franc\"\n}, {\n  id: \"CLF\",\n  name: \"Chilean Unit of Account (UF)\"\n}, {\n  id: \"CLP\",\n  name: \"Chilean Peso\"\n}, {\n  id: \"CNY\",\n  name: \"Chinese Yuan\"\n}, {\n  id: \"COP\",\n  name: \"Colombian Peso\"\n}, {\n  id: \"CRC\",\n  name: \"Costa Rican Colón\"\n}, {\n  id: \"CUC\",\n  name: \"Cuban Convertible Peso\"\n}, {\n  id: \"CUP\",\n  name: \"Cuban Peso\"\n}, {\n  id: \"CVE\",\n  name: \"Cape Verdean Escudo\"\n}, {\n  id: \"CZK\",\n  name: \"Czech Republic Koruna\"\n}, {\n  id: \"DJF\",\n  name: \"Djiboutian Franc\"\n}, {\n  id: \"DKK\",\n  name: \"Danish Krone\"\n}, {\n  id: \"DOP\",\n  name: \"Dominican Peso\"\n}, {\n  id: \"DZD\",\n  name: \"Algerian Dinar\"\n}, {\n  id: \"EGP\",\n  name: \"Egyptian Pound\"\n}, {\n  id: \"ERN\",\n  name: \"Eritrean Nakfa\"\n}, {\n  id: \"ETB\",\n  name: \"Ethiopian Birr\"\n}, {\n  id: \"EUR\",\n  name: \"Euro\"\n}, {\n  id: \"FJD\",\n  name: \"Fijian Dollar\"\n}, {\n  id: \"FKP\",\n  name: \"Falkland Islands Pound\"\n}, {\n  id: \"GBP\",\n  name: \"British Pound Sterling\"\n}, {\n  id: \"GEL\",\n  name: \"Georgian Lari\"\n}, {\n  id: \"GGP\",\n  name: \"Guernsey Pound\"\n}, {\n  id: \"GHS\",\n  name: \"Ghanaian Cedi\"\n}, {\n  id: \"GIP\",\n  name: \"Gibraltar Pound\"\n}, {\n  id: \"GMD\",\n  name: \"Gambian Dalasi\"\n}, {\n  id: \"GNF\",\n  name: \"Guinean Franc\"\n}, {\n  id: \"GTQ\",\n  name: \"Guatemalan Quetzal\"\n}, {\n  id: \"GYD\",\n  name: \"Guyanaese Dollar\"\n}, {\n  id: \"HKD\",\n  name: \"Hong Kong Dollar\"\n}, {\n  id: \"HNL\",\n  name: \"Honduran Lempira\"\n}, {\n  id: \"HRK\",\n  name: \"Croatian Kuna\"\n}, {\n  id: \"HTG\",\n  name: \"Haitian Gourde\"\n}, {\n  id: \"HUF\",\n  name: \"Hungarian Forint\"\n}, {\n  id: \"IDR\",\n  name: \"Indonesian Rupiah\"\n}, {\n  id: \"ILS\",\n  name: \"Israeli New Sheqel\"\n}, {\n  id: \"IMP\",\n  name: \"Manx pound\"\n}, {\n  id: \"INR\",\n  name: \"Indian Rupee\"\n}, {\n  id: \"IQD\",\n  name: \"Iraqi Dinar\"\n}, {\n  id: \"IRR\",\n  name: \"Iranian Rial\"\n}, {\n  id: \"ISK\",\n  name: \"Icelandic Króna\"\n}, {\n  id: \"JEP\",\n  name: \"Jersey Pound\"\n}, {\n  id: \"JMD\",\n  name: \"Jamaican Dollar\"\n}, {\n  id: \"JOD\",\n  name: \"Jordanian Dinar\"\n}, {\n  id: \"JPY\",\n  name: \"Japanese Yen\"\n}, {\n  id: \"KES\",\n  name: \"Kenyan Shilling\"\n}, {\n  id: \"KGS\",\n  name: \"Kyrgystani Som\"\n}, {\n  id: \"KHR\",\n  name: \"Cambodian Riel\"\n}, {\n  id: \"KMF\",\n  name: \"Comorian Franc\"\n}, {\n  id: \"KPW\",\n  name: \"North Korean Won\"\n}, {\n  id: \"KRW\",\n  name: \"South Korean Won\"\n}, {\n  id: \"KWD\",\n  name: \"Kuwaiti Dinar\"\n}, {\n  id: \"KYD\",\n  name: \"Cayman Islands Dollar\"\n}, {\n  id: \"KZT\",\n  name: \"Kazakhstani Tenge\"\n}, {\n  id: \"LAK\",\n  name: \"Laotian Kip\"\n}, {\n  id: \"LBP\",\n  name: \"Lebanese Pound\"\n}, {\n  id: \"LKR\",\n  name: \"Sri Lankan Rupee\"\n}, {\n  id: \"LRD\",\n  name: \"Liberian Dollar\"\n}, {\n  id: \"LSL\",\n  name: \"Lesotho Loti\"\n}, {\n  id: \"LTL\",\n  name: \"Lithuanian Litas\"\n}, {\n  id: \"LVL\",\n  name: \"Latvian Lats\"\n}, {\n  id: \"LYD\",\n  name: \"Libyan Dinar\"\n}, {\n  id: \"MAD\",\n  name: \"Moroccan Dirham\"\n}, {\n  id: \"MDL\",\n  name: \"Moldovan Leu\"\n}, {\n  id: \"MGA\",\n  name: \"Malagasy Ariary\"\n}, {\n  id: \"MKD\",\n  name: \"Macedonian Denar\"\n}, {\n  id: \"MMK\",\n  name: \"Myanma Kyat\"\n}, {\n  id: \"MNT\",\n  name: \"Mongolian Tugrik\"\n}, {\n  id: \"MOP\",\n  name: \"Macanese Pataca\"\n}, {\n  id: \"MRO\",\n  name: \"Mauritanian Ouguiya\"\n}, {\n  id: \"MUR\",\n  name: \"Mauritian Rupee\"\n}, {\n  id: \"MVR\",\n  name: \"Maldivian Rufiyaa\"\n}, {\n  id: \"MWK\",\n  name: \"Malawian Kwacha\"\n}, {\n  id: \"MXN\",\n  name: \"Mexican Peso\"\n}, {\n  id: \"MYR\",\n  name: \"Malaysian Ringgit\"\n}, {\n  id: \"MZN\",\n  name: \"Mozambican Metical\"\n}, {\n  id: \"NAD\",\n  name: \"Namibian Dollar\"\n}, {\n  id: \"NGN\",\n  name: \"Nigerian Naira\"\n}, {\n  id: \"NIO\",\n  name: \"Nicaraguan Córdoba\"\n}, {\n  id: \"NOK\",\n  name: \"Norwegian Krone\"\n}, {\n  id: \"NPR\",\n  name: \"Nepalese Rupee\"\n}, {\n  id: \"NZD\",\n  name: \"New Zealand Dollar\"\n}, {\n  id: \"OMR\",\n  name: \"Omani Rial\"\n}, {\n  id: \"PAB\",\n  name: \"Panamanian Balboa\"\n}, {\n  id: \"PEN\",\n  name: \"Peruvian Nuevo Sol\"\n}, {\n  id: \"PGK\",\n  name: \"Papua New Guinean Kina\"\n}, {\n  id: \"PHP\",\n  name: \"Philippine Peso\"\n}, {\n  id: \"PKR\",\n  name: \"Pakistani Rupee\"\n}, {\n  id: \"PLN\",\n  name: \"Polish Zloty\"\n}, {\n  id: \"PYG\",\n  name: \"Paraguayan Guarani\"\n}, {\n  id: \"QAR\",\n  name: \"Qatari Rial\"\n}, {\n  id: \"RON\",\n  name: \"Romanian Leu\"\n}, {\n  id: \"RSD\",\n  name: \"Serbian Dinar\"\n}, {\n  id: \"RUB\",\n  name: \"Russian Ruble\"\n}, {\n  id: \"RWF\",\n  name: \"Rwandan Franc\"\n}, {\n  id: \"SAR\",\n  name: \"Saudi Riyal\"\n}, {\n  id: \"SBD\",\n  name: \"Solomon Islands Dollar\"\n}, {\n  id: \"SCR\",\n  name: \"Seychellois Rupee\"\n}, {\n  id: \"SDG\",\n  name: \"Sudanese Pound\"\n}, {\n  id: \"SEK\",\n  name: \"Swedish Krona\"\n}, {\n  id: \"SGD\",\n  name: \"Singapore Dollar\"\n}, {\n  id: \"SHP\",\n  name: \"Saint Helena Pound\"\n}, {\n  id: \"SLL\",\n  name: \"Sierra Leonean Leone\"\n}, {\n  id: \"SOS\",\n  name: \"Somali Shilling\"\n}, {\n  id: \"SRD\",\n  name: \"Surinamese Dollar\"\n}, {\n  id: \"STD\",\n  name: \"São Tomé and Príncipe Dobra\"\n}, {\n  id: \"SVC\",\n  name: \"Salvadoran Colón\"\n}, {\n  id: \"SYP\",\n  name: \"Syrian Pound\"\n}, {\n  id: \"SZL\",\n  name: \"Swazi Lilangeni\"\n}, {\n  id: \"THB\",\n  name: \"Thai Baht\"\n}, {\n  id: \"TJS\",\n  name: \"Tajikistani Somoni\"\n}, {\n  id: \"TMT\",\n  name: \"Turkmenistani Manat\"\n}, {\n  id: \"TND\",\n  name: \"Tunisian Dinar\"\n}, {\n  id: \"TOP\",\n  name: \"Tongan Paʻanga\"\n}, {\n  id: \"TRY\",\n  name: \"Turkish Lira\"\n}, {\n  id: \"TTD\",\n  name: \"Trinidad and Tobago Dollar\"\n}, {\n  id: \"TWD\",\n  name: \"New Taiwan Dollar\"\n}, {\n  id: \"TZS\",\n  name: \"Tanzanian Shilling\"\n}, {\n  id: \"UAH\",\n  name: \"Ukrainian Hryvnia\"\n}, {\n  id: \"UGX\",\n  name: \"Ugandan Shilling\"\n}, {\n  id: \"USD\",\n  name: \"United States Dollar\"\n}, {\n  id: \"UYU\",\n  name: \"Uruguayan Peso\"\n}, {\n  id: \"UZS\",\n  name: \"Uzbekistan Som\"\n}, {\n  id: \"VEF\",\n  name: \"Venezuelan Bolívar Fuerte\"\n}, {\n  id: \"VND\",\n  name: \"Vietnamese Dong\"\n}, {\n  id: \"VUV\",\n  name: \"Vanuatu Vatu\"\n}, {\n  id: \"WST\",\n  name: \"Samoan Tala\"\n}, {\n  id: \"XAF\",\n  name: \"CFA Franc BEAC\"\n}, {\n  id: \"XAG\",\n  name: \"Silver (troy ounce)\"\n}, {\n  id: \"XAU\",\n  name: \"Gold (troy ounce)\"\n}, {\n  id: \"XCD\",\n  name: \"East Caribbean Dollar\"\n}, {\n  id: \"XDR\",\n  name: \"Special Drawing Rights\"\n}, {\n  id: \"XOF\",\n  name: \"CFA Franc BCEAO\"\n}, {\n  id: \"XPF\",\n  name: \"CFP Franc\"\n}, {\n  id: \"YER\",\n  name: \"Yemeni Rial\"\n}, {\n  id: \"ZAR\",\n  name: \"South African Rand\"\n}, {\n  id: \"ZMK\",\n  name: \"Zambian Kwacha (pre-2013)\"\n}, {\n  id: \"ZMW\",\n  name: \"Zambian Kwacha\"\n}, {\n  id: \"ZWL\",\n  name: \"Zimbabwean Dollar\"\n}];\n\nconst Forex = props => {\n  _s();\n\n  const [forex, setForex] = useState(number(\"1\"));\n  const [forexType, setForexType] = useState([]);\n  const [filterData, setFilterData] = useState(\"\");\n  const [numericalInput, setNumericalInput] = useState(number(1));\n  const [secondaryInput, setSecondaryInput] = useState(\"\");\n  const [secondaryAPIData, setSecondaryAPIData] = useState(\"1\");\n  const [result, setResult] = useState(1);\n  const [content, setContent] = useState(\"\"); // const [searchWord, setSearchWord] = useState(\"USD\");\n\n  const [extForex, setExtForex] = useState(\"\");\n  const forexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${filterData}&source=USD&format=1`;\n  const secondaryForexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${secondaryInput}&source=USD&format=1`;\n\n  const sortForex = () => {\n    const sortByName = forexList.map(chicken => {\n      return {\n        name: chicken.name\n      };\n    });\n    setForexType(sortByName);\n  };\n\n  useEffect(() => {\n    sortForex();\n  }, []);\n  const emptyArray = [];\n  const displayName = forexType.map(chicken => {\n    return emptyArray.push(chicken.name);\n  });\n  useEffect(() => {\n    getResults();\n  }, [props.forexState]);\n\n  const getResults = () => {\n    const searchWord = props.forexSearchWord; // console.log(searchWord);\n\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      } // props.setForexState(false);\n\n\n      return result;\n    }, \"\");\n    setFilterData(newFilter); // console.log(newFilter);\n\n    setTimeout(() => {\n      makeApiCall(newFilter);\n    }, 1000);\n\n    const makeApiCall = async input => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`; // console.log(url);\n\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setForex(rawData.quotes);\n      console.log(rawData.quotes);\n    }; // makeApiCall(filterData);\n\n  }; // console.log(emptyArray);\n\n\n  const forexArray = forex;\n\n  const handleEventChange = event => {\n    setNumericalInput(event.target.value);\n  }; // console.log(numericalInput);\n\n\n  const handleSecondaryValueChange = event => {\n    // if ((event = NaN)) {\n    //   let searchWord = \"United States Dollar\";\n    //   const newFilter = Object.keys(forexList).reduce((result, key) => {\n    //     if (forexList[key].name.includes(searchWord)) {\n    //       result = forexList[key].id;\n    //     }\n    //     return result;\n    //   }, \"\");\n    //   setSecondaryInput(newFilter);\n    //   console.log(newFilter);\n    // } else {\n    let searchWord = event;\n    console.log(searchWord);\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n\n      return result;\n    }, \"\");\n    setSecondaryInput(newFilter);\n    console.log(secondaryInput);\n    setTimeout(() => {\n      makeSecondaryApiCall(newFilter);\n    }, 1000);\n\n    const makeSecondaryApiCall = async input => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`;\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setSecondaryAPIData(rawData.quotes);\n      console.log(rawData.quotes);\n    };\n  }; // console.log(secondaryForexAPI);\n  // makeSecondaryApiCall(secondaryInput);\n  // console.log(rawData.quotes);\n\n\n  const onSubmit = () => {\n    console.log(\"clicked!\");\n    console.log(Object.values(secondaryAPIData)[0]);\n    console.log(secondaryAPIData !== \"undefined\");\n    console.log(Object.values(forex)[0]);\n\n    if (secondaryAPIData !== \"undefined\") {\n      console.log(forexAPI); // console.log(Object.values(secondaryAPIData)[0]);\n\n      setSecondaryAPIData(\"1\");\n      let num1 = parseInt(secondaryAPIData);\n      let num2 = parseInt(numericalInput);\n      const ratio = Object.values(forex)[0] / num1 * num2;\n      console.log(Object.values(forex)[0] / Object.values(secondaryAPIData)[0] * numericalInput);\n      setResult(ratio); // console.log(typeof Object.values(extForex)[0]);\n\n      console.log(ratio);\n\n      if (ratio > 0) {\n        setContent( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", numericalInput, \" \", forex, \" = $\", ratio, secondaryInput]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this));\n      }\n    } else {\n      const ratio = Object.values(secondaryAPIData)[0] / Object.values(forex)[0] * numericalInput;\n      setResult(ratio); // console.log(typeof Object.values(secondaryAPIData)[0]);\n      // console.log(ratio);\n\n      if (ratio > 0) {\n        setContent( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", numericalInput, \" \", forex, \" = $ \", secondaryInput]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this));\n      }\n    }\n  }; // console.log(result);\n  // <div className=\"data\">\n  //   {Object.keys(forexArray).map((key, i) => (\n  //     <p key={i}>\n  //       {/* <span>1USD:{key}</span> */}\n  //       <span>\n  //         ${numericalInput} {secondaryInput} = ${forexArray[key]}\n  //         {filterData}\n  //       </span>\n  //     </p>\n  //   ))}\n  // </div>;\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"lg\",\n      onClick: onSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Input value\",\n      onChange: handleEventChange,\n      defaultValue: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"lg\",\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownList, {\n      data: emptyArray,\n      defaultValue: \"United States Dollar\",\n      onChange: handleSecondaryValueChange // onClick={makeSecondaryApiCall}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Forex, \"rHIWOJXMchQ5TVqhbCrM9wbnFz4=\");\n\n_c = Forex;\nexport default Forex;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forex\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/Forex.js"],"names":["React","useState","useEffect","DropdownList","SlideTransitionGroup","AggregateInput","Button","Container","Row","Col","forexList","id","name","Forex","props","forex","setForex","number","forexType","setForexType","filterData","setFilterData","numericalInput","setNumericalInput","secondaryInput","setSecondaryInput","secondaryAPIData","setSecondaryAPIData","result","setResult","content","setContent","extForex","setExtForex","forexAPI","secondaryForexAPI","sortForex","sortByName","map","chicken","emptyArray","displayName","push","getResults","forexState","searchWord","forexSearchWord","newFilter","Object","keys","reduce","key","includes","setTimeout","makeApiCall","input","url","res","fetch","rawData","json","quotes","console","log","forexArray","handleEventChange","event","target","value","handleSecondaryValueChange","makeSecondaryApiCall","onSubmit","values","num1","parseInt","num2","ratio"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DropdownList, SlideTransitionGroup } from \"react-widgets/cjs\";\n// import Result from \"./Result\";\nimport AggregateInput from \"./AggregateInput\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\n// import Commodity from \"./Commodity\";\n\nconst forexList = [\n  { id: \"AED\", name: \"United Arab Emirates Dirham\" },\n  { id: \"AFN\", name: \"Afghan Afghani\" },\n  { id: \"ALL\", name: \"Albanian Lek\" },\n  { id: \"AMD\", name: \"Armenian Dram\" },\n  { id: \"ANG\", name: \"Netherlands Antillean Guilder\" },\n  { id: \"AOA\", name: \"Angolan Kwanza\" },\n  { id: \"ARS\", name: \"Argentine Peso\" },\n  { id: \"AUD\", name: \"Australian Dollar\" },\n  { id: \"AWG\", name: \"Aruban Florin\" },\n  { id: \"AZN\", name: \"Azerbaijani Manat\" },\n  { id: \"BAM\", name: \"Bosnia-Herzegovina Convertible Mark\" },\n  { id: \"BBD\", name: \"Barbadian Dollar\" },\n  { id: \"BDT\", name: \"Bangladeshi Taka\" },\n  { id: \"BGN\", name: \"Bulgarian Lev\" },\n  { id: \"BHD\", name: \"Bahraini Dinar\" },\n  { id: \"BIF\", name: \"Burundian Franc\" },\n  { id: \"BMD\", name: \"Bermudan Dollar\" },\n  { id: \"BND\", name: \"Brunei Dollar\" },\n  { id: \"BOB\", name: \"Bolivian Boliviano\" },\n  { id: \"BRL\", name: \"Brazilian Real\" },\n  { id: \"BSD\", name: \"Bahamian Dollar\" },\n  { id: \"BTC\", name: \"Bitcoin\" },\n  { id: \"BTN\", name: \"Bhutanese Ngultrum\" },\n  { id: \"BWP\", name: \"Botswanan Pula\" },\n  { id: \"BYR\", name: \"Belarusian Ruble\" },\n  { id: \"BZD\", name: \"Belize Dollar\" },\n  { id: \"CAD\", name: \"Canadian Dollar\" },\n  { id: \"CDF\", name: \"Congolese Franc\" },\n  { id: \"CHF\", name: \"Swiss Franc\" },\n  { id: \"CLF\", name: \"Chilean Unit of Account (UF)\" },\n  { id: \"CLP\", name: \"Chilean Peso\" },\n  { id: \"CNY\", name: \"Chinese Yuan\" },\n  { id: \"COP\", name: \"Colombian Peso\" },\n  { id: \"CRC\", name: \"Costa Rican Colón\" },\n  { id: \"CUC\", name: \"Cuban Convertible Peso\" },\n  { id: \"CUP\", name: \"Cuban Peso\" },\n  { id: \"CVE\", name: \"Cape Verdean Escudo\" },\n  { id: \"CZK\", name: \"Czech Republic Koruna\" },\n  { id: \"DJF\", name: \"Djiboutian Franc\" },\n  { id: \"DKK\", name: \"Danish Krone\" },\n  { id: \"DOP\", name: \"Dominican Peso\" },\n  { id: \"DZD\", name: \"Algerian Dinar\" },\n  { id: \"EGP\", name: \"Egyptian Pound\" },\n  { id: \"ERN\", name: \"Eritrean Nakfa\" },\n  { id: \"ETB\", name: \"Ethiopian Birr\" },\n  { id: \"EUR\", name: \"Euro\" },\n  { id: \"FJD\", name: \"Fijian Dollar\" },\n  { id: \"FKP\", name: \"Falkland Islands Pound\" },\n  { id: \"GBP\", name: \"British Pound Sterling\" },\n  { id: \"GEL\", name: \"Georgian Lari\" },\n  { id: \"GGP\", name: \"Guernsey Pound\" },\n  { id: \"GHS\", name: \"Ghanaian Cedi\" },\n  { id: \"GIP\", name: \"Gibraltar Pound\" },\n  { id: \"GMD\", name: \"Gambian Dalasi\" },\n  { id: \"GNF\", name: \"Guinean Franc\" },\n  { id: \"GTQ\", name: \"Guatemalan Quetzal\" },\n  { id: \"GYD\", name: \"Guyanaese Dollar\" },\n  { id: \"HKD\", name: \"Hong Kong Dollar\" },\n  { id: \"HNL\", name: \"Honduran Lempira\" },\n  { id: \"HRK\", name: \"Croatian Kuna\" },\n  { id: \"HTG\", name: \"Haitian Gourde\" },\n  { id: \"HUF\", name: \"Hungarian Forint\" },\n  { id: \"IDR\", name: \"Indonesian Rupiah\" },\n  { id: \"ILS\", name: \"Israeli New Sheqel\" },\n  { id: \"IMP\", name: \"Manx pound\" },\n  { id: \"INR\", name: \"Indian Rupee\" },\n  { id: \"IQD\", name: \"Iraqi Dinar\" },\n  { id: \"IRR\", name: \"Iranian Rial\" },\n  { id: \"ISK\", name: \"Icelandic Króna\" },\n  { id: \"JEP\", name: \"Jersey Pound\" },\n  { id: \"JMD\", name: \"Jamaican Dollar\" },\n  { id: \"JOD\", name: \"Jordanian Dinar\" },\n  { id: \"JPY\", name: \"Japanese Yen\" },\n  { id: \"KES\", name: \"Kenyan Shilling\" },\n  { id: \"KGS\", name: \"Kyrgystani Som\" },\n  { id: \"KHR\", name: \"Cambodian Riel\" },\n  { id: \"KMF\", name: \"Comorian Franc\" },\n  { id: \"KPW\", name: \"North Korean Won\" },\n  { id: \"KRW\", name: \"South Korean Won\" },\n  { id: \"KWD\", name: \"Kuwaiti Dinar\" },\n  { id: \"KYD\", name: \"Cayman Islands Dollar\" },\n  { id: \"KZT\", name: \"Kazakhstani Tenge\" },\n  { id: \"LAK\", name: \"Laotian Kip\" },\n  { id: \"LBP\", name: \"Lebanese Pound\" },\n  { id: \"LKR\", name: \"Sri Lankan Rupee\" },\n  { id: \"LRD\", name: \"Liberian Dollar\" },\n  { id: \"LSL\", name: \"Lesotho Loti\" },\n  { id: \"LTL\", name: \"Lithuanian Litas\" },\n  { id: \"LVL\", name: \"Latvian Lats\" },\n  { id: \"LYD\", name: \"Libyan Dinar\" },\n  { id: \"MAD\", name: \"Moroccan Dirham\" },\n  { id: \"MDL\", name: \"Moldovan Leu\" },\n  { id: \"MGA\", name: \"Malagasy Ariary\" },\n  { id: \"MKD\", name: \"Macedonian Denar\" },\n  { id: \"MMK\", name: \"Myanma Kyat\" },\n  { id: \"MNT\", name: \"Mongolian Tugrik\" },\n  { id: \"MOP\", name: \"Macanese Pataca\" },\n  { id: \"MRO\", name: \"Mauritanian Ouguiya\" },\n  { id: \"MUR\", name: \"Mauritian Rupee\" },\n  { id: \"MVR\", name: \"Maldivian Rufiyaa\" },\n  { id: \"MWK\", name: \"Malawian Kwacha\" },\n  { id: \"MXN\", name: \"Mexican Peso\" },\n  { id: \"MYR\", name: \"Malaysian Ringgit\" },\n  { id: \"MZN\", name: \"Mozambican Metical\" },\n  { id: \"NAD\", name: \"Namibian Dollar\" },\n  { id: \"NGN\", name: \"Nigerian Naira\" },\n  { id: \"NIO\", name: \"Nicaraguan Córdoba\" },\n  { id: \"NOK\", name: \"Norwegian Krone\" },\n  { id: \"NPR\", name: \"Nepalese Rupee\" },\n  { id: \"NZD\", name: \"New Zealand Dollar\" },\n  { id: \"OMR\", name: \"Omani Rial\" },\n  { id: \"PAB\", name: \"Panamanian Balboa\" },\n  { id: \"PEN\", name: \"Peruvian Nuevo Sol\" },\n  { id: \"PGK\", name: \"Papua New Guinean Kina\" },\n  { id: \"PHP\", name: \"Philippine Peso\" },\n  { id: \"PKR\", name: \"Pakistani Rupee\" },\n  { id: \"PLN\", name: \"Polish Zloty\" },\n  { id: \"PYG\", name: \"Paraguayan Guarani\" },\n  { id: \"QAR\", name: \"Qatari Rial\" },\n  { id: \"RON\", name: \"Romanian Leu\" },\n  { id: \"RSD\", name: \"Serbian Dinar\" },\n  { id: \"RUB\", name: \"Russian Ruble\" },\n  { id: \"RWF\", name: \"Rwandan Franc\" },\n  { id: \"SAR\", name: \"Saudi Riyal\" },\n  { id: \"SBD\", name: \"Solomon Islands Dollar\" },\n  { id: \"SCR\", name: \"Seychellois Rupee\" },\n  { id: \"SDG\", name: \"Sudanese Pound\" },\n  { id: \"SEK\", name: \"Swedish Krona\" },\n  { id: \"SGD\", name: \"Singapore Dollar\" },\n  { id: \"SHP\", name: \"Saint Helena Pound\" },\n  { id: \"SLL\", name: \"Sierra Leonean Leone\" },\n  { id: \"SOS\", name: \"Somali Shilling\" },\n  { id: \"SRD\", name: \"Surinamese Dollar\" },\n  { id: \"STD\", name: \"São Tomé and Príncipe Dobra\" },\n  { id: \"SVC\", name: \"Salvadoran Colón\" },\n  { id: \"SYP\", name: \"Syrian Pound\" },\n  { id: \"SZL\", name: \"Swazi Lilangeni\" },\n  { id: \"THB\", name: \"Thai Baht\" },\n  { id: \"TJS\", name: \"Tajikistani Somoni\" },\n  { id: \"TMT\", name: \"Turkmenistani Manat\" },\n  { id: \"TND\", name: \"Tunisian Dinar\" },\n  { id: \"TOP\", name: \"Tongan Paʻanga\" },\n  { id: \"TRY\", name: \"Turkish Lira\" },\n  { id: \"TTD\", name: \"Trinidad and Tobago Dollar\" },\n  { id: \"TWD\", name: \"New Taiwan Dollar\" },\n  { id: \"TZS\", name: \"Tanzanian Shilling\" },\n  { id: \"UAH\", name: \"Ukrainian Hryvnia\" },\n  { id: \"UGX\", name: \"Ugandan Shilling\" },\n  { id: \"USD\", name: \"United States Dollar\" },\n  { id: \"UYU\", name: \"Uruguayan Peso\" },\n  { id: \"UZS\", name: \"Uzbekistan Som\" },\n  { id: \"VEF\", name: \"Venezuelan Bolívar Fuerte\" },\n  { id: \"VND\", name: \"Vietnamese Dong\" },\n  { id: \"VUV\", name: \"Vanuatu Vatu\" },\n  { id: \"WST\", name: \"Samoan Tala\" },\n  { id: \"XAF\", name: \"CFA Franc BEAC\" },\n  { id: \"XAG\", name: \"Silver (troy ounce)\" },\n  { id: \"XAU\", name: \"Gold (troy ounce)\" },\n  { id: \"XCD\", name: \"East Caribbean Dollar\" },\n  { id: \"XDR\", name: \"Special Drawing Rights\" },\n  { id: \"XOF\", name: \"CFA Franc BCEAO\" },\n  { id: \"XPF\", name: \"CFP Franc\" },\n  { id: \"YER\", name: \"Yemeni Rial\" },\n  { id: \"ZAR\", name: \"South African Rand\" },\n  { id: \"ZMK\", name: \"Zambian Kwacha (pre-2013)\" },\n  { id: \"ZMW\", name: \"Zambian Kwacha\" },\n  { id: \"ZWL\", name: \"Zimbabwean Dollar\" },\n];\n\nconst Forex = (props) => {\n  const [forex, setForex] = useState(number(\"1\"));\n  const [forexType, setForexType] = useState([]);\n  const [filterData, setFilterData] = useState(\"\");\n  const [numericalInput, setNumericalInput] = useState(number(1));\n  const [secondaryInput, setSecondaryInput] = useState(\"\");\n  const [secondaryAPIData, setSecondaryAPIData] = useState(\"1\");\n  const [result, setResult] = useState(1);\n  const [content, setContent] = useState(\"\");\n  // const [searchWord, setSearchWord] = useState(\"USD\");\n  const [extForex, setExtForex] = useState(\"\");\n\n  const forexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${filterData}&source=USD&format=1`;\n  const secondaryForexAPI = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${secondaryInput}&source=USD&format=1`;\n\n  const sortForex = () => {\n    const sortByName = forexList.map((chicken) => {\n      return {\n        name: chicken.name,\n      };\n    });\n    setForexType(sortByName);\n  };\n\n  useEffect(() => {\n    sortForex();\n  }, []);\n\n  const emptyArray = [];\n\n  const displayName = forexType.map((chicken) => {\n    return emptyArray.push(chicken.name);\n  });\n\n  useEffect(() => {\n    getResults();\n  }, [props.forexState]);\n\n  const getResults = () => {\n    const searchWord = props.forexSearchWord;\n    // console.log(searchWord);\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n      // props.setForexState(false);\n      return result;\n    }, \"\");\n    setFilterData(newFilter);\n    // console.log(newFilter);\n\n    setTimeout(() => {\n      makeApiCall(newFilter);\n    }, 1000);\n\n    const makeApiCall = async (input) => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`;\n      // console.log(url);\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setForex(rawData.quotes);\n      console.log(rawData.quotes);\n    };\n    // makeApiCall(filterData);\n  };\n  // console.log(emptyArray);\n\n  const forexArray = forex;\n\n  const handleEventChange = (event) => {\n    setNumericalInput(event.target.value);\n  };\n  // console.log(numericalInput);\n\n  const handleSecondaryValueChange = (event) => {\n    // if ((event = NaN)) {\n    //   let searchWord = \"United States Dollar\";\n    //   const newFilter = Object.keys(forexList).reduce((result, key) => {\n    //     if (forexList[key].name.includes(searchWord)) {\n    //       result = forexList[key].id;\n    //     }\n    //     return result;\n    //   }, \"\");\n    //   setSecondaryInput(newFilter);\n    //   console.log(newFilter);\n    // } else {\n    let searchWord = event;\n    console.log(searchWord);\n    const newFilter = Object.keys(forexList).reduce((result, key) => {\n      if (forexList[key].name.includes(searchWord)) {\n        result = forexList[key].id;\n      }\n      return result;\n    }, \"\");\n    setSecondaryInput(newFilter);\n    console.log(secondaryInput);\n\n    setTimeout(() => {\n      makeSecondaryApiCall(newFilter);\n    }, 1000);\n\n    const makeSecondaryApiCall = async (input) => {\n      const url = `http://apilayer.net/api/live?access_key=b7bf0fb87af0b9ef3ff79b78a423f76c&currencies=${input}&source=USD&format=1`;\n      const res = await fetch(url);\n      const rawData = await res.json();\n      setSecondaryAPIData(rawData.quotes);\n      console.log(rawData.quotes);\n    };\n  };\n  // console.log(secondaryForexAPI);\n  // makeSecondaryApiCall(secondaryInput);\n  // console.log(rawData.quotes);\n\n  const onSubmit = () => {\n    console.log(\"clicked!\");\n    console.log(Object.values(secondaryAPIData)[0]);\n    console.log(secondaryAPIData !== \"undefined\");\n    console.log(Object.values(forex)[0]);\n\n    if (secondaryAPIData !== \"undefined\") {\n      console.log(forexAPI);\n      // console.log(Object.values(secondaryAPIData)[0]);\n      setSecondaryAPIData(\"1\");\n      let num1 = parseInt(secondaryAPIData);\n      let num2 = parseInt(numericalInput);\n      const ratio = (Object.values(forex)[0] / num1) * num2;\n      console.log(\n        (Object.values(forex)[0] / Object.values(secondaryAPIData)[0]) *\n          numericalInput\n      );\n      setResult(ratio);\n      // console.log(typeof Object.values(extForex)[0]);\n      console.log(ratio);\n\n      if (ratio > 0) {\n        setContent(\n          <p>\n            ${numericalInput} {forex} = ${ratio}\n            {secondaryInput}\n          </p>\n        );\n      }\n    } else {\n      const ratio =\n        (Object.values(secondaryAPIData)[0] / Object.values(forex)[0]) *\n        numericalInput;\n      setResult(ratio);\n      // console.log(typeof Object.values(secondaryAPIData)[0]);\n      // console.log(ratio);\n\n      if (ratio > 0) {\n        setContent(\n          <p>\n            ${numericalInput} {forex} = $ {secondaryInput}\n          </p>\n        );\n      }\n    }\n  };\n\n  // console.log(result);\n  // <div className=\"data\">\n  //   {Object.keys(forexArray).map((key, i) => (\n  //     <p key={i}>\n  //       {/* <span>1USD:{key}</span> */}\n  //       <span>\n  //         ${numericalInput} {secondaryInput} = ${forexArray[key]}\n  //         {filterData}\n  //       </span>\n  //     </p>\n  //   ))}\n  // </div>;\n\n  return (\n    <div>\n      <br />\n      <Button size=\"lg\" onClick={onSubmit}>\n        Submit\n      </Button>{\" \"}\n      <input\n        type=\"number\"\n        placeholder=\"Input value\"\n        onChange={handleEventChange}\n        defaultValue=\"1\"\n      ></input>\n      <br />\n      <br />\n      <Button size=\"lg\">Swap</Button>\n      <br />\n      <br />\n      <DropdownList\n        data={emptyArray}\n        defaultValue=\"United States Dollar\"\n        onChange={handleSecondaryValueChange}\n        // onClick={makeSecondaryApiCall}\n      ></DropdownList>\n      <br />\n      <div className=\"result\">\n        {/* ${numericalInput} = $ {result} */}\n        {content}\n      </div>\n      <br />\n    </div>\n  );\n};\n\nexport default Forex;\n"]},"metadata":{},"sourceType":"module"}