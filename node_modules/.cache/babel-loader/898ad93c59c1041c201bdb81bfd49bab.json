{"ast":null,"code":"var _jsxFileName = \"/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoTicker = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    data,\n    setData\n  } = useState(\"\");\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/search/trending'`;\n  const limiter = new Bottleneck({\n    reservoir: 100,\n    // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000,\n    // must be divisible by 250\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333 // pick a value that makes sense for your use case\n\n  });\n\n  const GetRatesFromAPI = () => {\n    _s();\n\n    const [rates, setRates] = useState(\"\");\n    useEffect(() => {\n      async function fetchData() {\n        const ratesFromAPI = await makeAPICall();\n        setRates(ratesFromAPI);\n      }\n\n      fetchData();\n    }, []);\n    return rates ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        whiteSpace: \"nowrap\"\n      },\n      children: [rates.join(\" +++ \"), \" +++ \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        visibility: \"hidden\"\n      },\n      children: \"Placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }; //   const result = await limiter.schedule(() => makeApiCall());\n\n\n  _s(GetRatesFromAPI, \"PxArx3BYTGErvd5zVkwcIxxOl0c=\");\n\n  const makeAPICall = async () => {\n    const res = await fetch(cryptoApiTicker);\n    const rawData = await res.json(); // console.log(rawData);\n\n    setData = rawData;\n  }; //   console.log(data);\n\n\n  const throttledApiCall = limiter.wrap(makeAPICall);\n  const allThePromises = data.map(item => {\n    return throttledApiCall();\n  }); //   const rawData = await limiter.schedule();\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Ticker, {\n      offset: \"run-in\",\n      speed: 10,\n      children: () => /*#__PURE__*/_jsxDEV(GetRatesFromAPI, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(CryptoTicker, \"0BcGgI3lzHvQLtfEzkhNz0DIEs4=\");\n\n_c = CryptoTicker;\nexport default CryptoTicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoTicker\");","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/src/component/CryptoTicker.js"],"names":["React","useState","useEffect","Ticker","Bottleneck","CryptoTicker","data","setData","cryptoApiTicker","limiter","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","maxConcurrent","minTime","GetRatesFromAPI","rates","setRates","fetchData","ratesFromAPI","makeAPICall","whiteSpace","join","visibility","res","fetch","rawData","json","throttledApiCall","wrap","allThePromises","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAAA;;AACzB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMO,eAAe,GAAI,mDAAzB;AAEA,QAAMC,OAAO,GAAG,IAAIL,UAAJ,CAAe;AAC7BM,IAAAA,SAAS,EAAE,GADkB;AACb;AAChBC,IAAAA,sBAAsB,EAAE,GAFK;AAG7BC,IAAAA,wBAAwB,EAAE,KAAK,IAHF;AAGQ;AAErC;AACAC,IAAAA,aAAa,EAAE,CANc;AAO7BC,IAAAA,OAAO,EAAE,GAPoB,CAOf;;AAPe,GAAf,CAAhB;;AASA,QAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACAC,IAAAA,SAAS,CAAC,MAAM;AACd,qBAAegB,SAAf,GAA2B;AACzB,cAAMC,YAAY,GAAG,MAAMC,WAAW,EAAtC;AACAH,QAAAA,QAAQ,CAACE,YAAD,CAAR;AACD;;AACDD,MAAAA,SAAS;AACV,KANQ,EAMN,EANM,CAAT;AAOA,WAAOF,KAAK,gBACV;AAAG,MAAA,KAAK,EAAE;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAAV;AAAA,iBAAqCL,KAAK,CAACM,IAAN,CAAW,OAAX,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAGV;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD,GAdD,CAdyB,CA8BzB;;;AA9ByB,KAcnBR,eAdmB;;AAgCzB,QAAMK,WAAW,GAAG,YAAY;AAC9B,UAAMI,GAAG,GAAG,MAAMC,KAAK,CAACjB,eAAD,CAAvB;AACA,UAAMkB,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB,CAF8B,CAG9B;;AACApB,IAAAA,OAAO,GAAGmB,OAAV;AACD,GALD,CAhCyB,CAuCzB;;;AAEA,QAAME,gBAAgB,GAAGnB,OAAO,CAACoB,IAAR,CAAaT,WAAb,CAAzB;AAEA,QAAMU,cAAc,GAAGxB,IAAI,CAACyB,GAAL,CAAUC,IAAD,IAAU;AACxC,WAAOJ,gBAAgB,EAAvB;AACD,GAFsB,CAAvB,CA3CyB,CA8CzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAC,QAAf;AAAwB,MAAA,KAAK,EAAE,EAA/B;AAAA,gBACG,mBAAM,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvED;;IAAMvB,Y;;KAAAA,Y;AAyEN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Ticker from \"react-ticker\";\nimport Bottleneck from \"bottleneck\";\n\nconst CryptoTicker = () => {\n  const { data, setData } = useState(\"\");\n\n  const cryptoApiTicker = `https://api.coingecko.com/api/v3/search/trending'`;\n\n  const limiter = new Bottleneck({\n    reservoir: 100, // initial value\n    reservoirRefreshAmount: 100,\n    reservoirRefreshInterval: 60 * 1000, // must be divisible by 250\n\n    // also use maxConcurrent and/or minTime for safety\n    maxConcurrent: 1,\n    minTime: 333, // pick a value that makes sense for your use case\n  });\n  const GetRatesFromAPI = () => {\n    const [rates, setRates] = useState(\"\");\n    useEffect(() => {\n      async function fetchData() {\n        const ratesFromAPI = await makeAPICall();\n        setRates(ratesFromAPI);\n      }\n      fetchData();\n    }, []);\n    return rates ? (\n      <p style={{ whiteSpace: \"nowrap\" }}>{rates.join(\" +++ \")} +++ </p>\n    ) : (\n      <p style={{ visibility: \"hidden\" }}>Placeholder</p>\n    );\n  };\n\n  //   const result = await limiter.schedule(() => makeApiCall());\n\n  const makeAPICall = async () => {\n    const res = await fetch(cryptoApiTicker);\n    const rawData = await res.json();\n    // console.log(rawData);\n    setData = rawData;\n  };\n\n  //   console.log(data);\n\n  const throttledApiCall = limiter.wrap(makeAPICall);\n\n  const allThePromises = data.map((item) => {\n    return throttledApiCall();\n  });\n  //   const rawData = await limiter.schedule();\n\n  // const filteredData = rawData.map((element, index) => {\n  //   return {\n  //     symbol: duck.coins.symbol,\n  //     priceBtc: duck.coins.price_btc,\n  //   };\n  // });\n  // setType(filteredData);\n\n  // const filteredData = rawDataArray.map((duck) => {\n  //   return {\n  //     price: duck.data.rates,\n  //     unit: duck.data.unit,\n  //   };\n  // });\n  // setType(filteredData);\n\n  return (\n    <div>\n      <Ticker offset=\"run-in\" speed={10}>\n        {() => <GetRatesFromAPI />}\n      </Ticker>\n    </div>\n  );\n};\n\nexport default CryptoTicker;\n"]},"metadata":{},"sourceType":"module"}