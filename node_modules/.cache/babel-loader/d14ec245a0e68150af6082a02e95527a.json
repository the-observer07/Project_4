{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.useFilteredData = useFilteredData;\nexports.presets = void 0;\n\nvar _Accessors = require(\"./Accessors\");\n\nvar _react = require(\"react\");\n\nconst presets = {\n  eq: (a, b) => a === b,\n  contains: (a, b) => a.indexOf(b) !== -1,\n  startsWith: (a, b) => a.lastIndexOf(b, 0) === 0\n};\nexports.presets = presets;\n\nfunction normalizeFilter(filter, textField) {\n  if (filter === false) return null;\n  if (typeof filter === 'function') return filter;\n  const filterPreset = presets[filter === true ? 'startsWith' : filter || 'eq'];\n  return (item, searchTerm) => {\n    let textValue = (0, _Accessors.dataText)(item, textField);\n    return filterPreset(textValue.toLowerCase(), searchTerm.toLowerCase());\n  };\n}\n\nfunction useFilteredData(data, filterer) {\n  let searchTerm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let textAccessor = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _react.useMemo)(() => {\n    const filter = normalizeFilter(filterer, textAccessor);\n    if (!filter || !searchTerm.trim()) return data;\n    return data.filter((item, idx) => filter(item, searchTerm, idx));\n  }, [data, filterer, searchTerm, textAccessor]);\n}","map":{"version":3,"sources":["/Users/inspireadmin/Documents/GitHub/Project_2/node_modules/react-widgets/cjs/Filter.js"],"names":["exports","__esModule","useFilteredData","presets","_Accessors","require","_react","eq","a","b","contains","indexOf","startsWith","lastIndexOf","normalizeFilter","filter","textField","filterPreset","item","searchTerm","textValue","dataText","toLowerCase","data","filterer","textAccessor","useMemo","trim","idx"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,OAAD,CAApB;;AAEA,MAAMF,OAAO,GAAG;AACdI,EAAAA,EAAE,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CADN;AAEdC,EAAAA,QAAQ,EAAE,CAACF,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACG,OAAF,CAAUF,CAAV,MAAiB,CAAC,CAFxB;AAGdG,EAAAA,UAAU,EAAE,CAACJ,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACK,WAAF,CAAcJ,CAAd,EAAiB,CAAjB,MAAwB;AAHhC,CAAhB;AAKAT,OAAO,CAACG,OAAR,GAAkBA,OAAlB;;AAEA,SAASW,eAAT,CAAyBC,MAAzB,EAAiCC,SAAjC,EAA4C;AAC1C,MAAID,MAAM,KAAK,KAAf,EAAsB,OAAO,IAAP;AACtB,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC,OAAOA,MAAP;AAClC,QAAME,YAAY,GAAGd,OAAO,CAACY,MAAM,KAAK,IAAX,GAAkB,YAAlB,GAAiCA,MAAM,IAAI,IAA5C,CAA5B;AACA,SAAO,CAACG,IAAD,EAAOC,UAAP,KAAsB;AAC3B,QAAIC,SAAS,GAAG,CAAC,GAAGhB,UAAU,CAACiB,QAAf,EAAyBH,IAAzB,EAA+BF,SAA/B,CAAhB;AACA,WAAOC,YAAY,CAACG,SAAS,CAACE,WAAV,EAAD,EAA0BH,UAAU,CAACG,WAAX,EAA1B,CAAnB;AACD,GAHD;AAID;;AAED,SAASpB,eAAT,CAAyBqB,IAAzB,EAA+BC,QAA/B,EAAwE;AAAA,MAA/BL,UAA+B,uEAAlB,EAAkB;AAAA,MAAdM,YAAc;AACtE,SAAO,CAAC,GAAGnB,MAAM,CAACoB,OAAX,EAAoB,MAAM;AAC/B,UAAMX,MAAM,GAAGD,eAAe,CAACU,QAAD,EAAWC,YAAX,CAA9B;AACA,QAAI,CAACV,MAAD,IAAW,CAACI,UAAU,CAACQ,IAAX,EAAhB,EAAmC,OAAOJ,IAAP;AACnC,WAAOA,IAAI,CAACR,MAAL,CAAY,CAACG,IAAD,EAAOU,GAAP,KAAeb,MAAM,CAACG,IAAD,EAAOC,UAAP,EAAmBS,GAAnB,CAAjC,CAAP;AACD,GAJM,EAIJ,CAACL,IAAD,EAAOC,QAAP,EAAiBL,UAAjB,EAA6BM,YAA7B,CAJI,CAAP;AAKD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.useFilteredData = useFilteredData;\nexports.presets = void 0;\n\nvar _Accessors = require(\"./Accessors\");\n\nvar _react = require(\"react\");\n\nconst presets = {\n  eq: (a, b) => a === b,\n  contains: (a, b) => a.indexOf(b) !== -1,\n  startsWith: (a, b) => a.lastIndexOf(b, 0) === 0\n};\nexports.presets = presets;\n\nfunction normalizeFilter(filter, textField) {\n  if (filter === false) return null;\n  if (typeof filter === 'function') return filter;\n  const filterPreset = presets[filter === true ? 'startsWith' : filter || 'eq'];\n  return (item, searchTerm) => {\n    let textValue = (0, _Accessors.dataText)(item, textField);\n    return filterPreset(textValue.toLowerCase(), searchTerm.toLowerCase());\n  };\n}\n\nfunction useFilteredData(data, filterer, searchTerm = '', textAccessor) {\n  return (0, _react.useMemo)(() => {\n    const filter = normalizeFilter(filterer, textAccessor);\n    if (!filter || !searchTerm.trim()) return data;\n    return data.filter((item, idx) => filter(item, searchTerm, idx));\n  }, [data, filterer, searchTerm, textAccessor]);\n}"]},"metadata":{},"sourceType":"script"}